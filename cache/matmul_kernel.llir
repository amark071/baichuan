; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %11 = and i32 %10, 31, !dbg !8
  %12 = lshr i32 %10, 5, !dbg !8
  %13 = and i32 %12, 3, !dbg !8
  %14 = lshr i32 %11, 3, !dbg !8
  %15 = shl nuw nsw i32 %13, 2, !dbg !8
  %16 = or i32 %15, %14, !dbg !8
  %17 = shl i32 %10, 3, !dbg !9
  %18 = and i32 %17, 120, !dbg !9
  %19 = and i32 %10, 7, !dbg !10
  %20 = shl nuw nsw i32 %19, 2, !dbg !10
  %21 = lshr i32 %11, 4, !dbg !11
  %22 = shl nuw nsw i32 %13, 1, !dbg !11
  %23 = or i32 %22, %21, !dbg !11
  %24 = or i32 %23, 8, !dbg !11
  %25 = or i32 %23, 16, !dbg !11
  %26 = or i32 %23, 24, !dbg !11
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !12
  %28 = add i32 %3, 15, !dbg !13
  %29 = sdiv i32 %28, 16, !dbg !17
  %30 = add i32 %4, 127, !dbg !18
  %31 = sdiv i32 %30, 128, !dbg !20
  %32 = shl nsw i32 %31, 2, !dbg !21
  %.frozen = freeze i32 %32
  %33 = sdiv i32 %27, %.frozen, !dbg !22
  %34 = shl i32 %33, 2, !dbg !23
  %35 = sub i32 %29, %34, !dbg !24
  %36 = tail call i32 @llvm.smin.i32(i32 %35, i32 4), !dbg !25
  %37 = srem i32 %27, %36, !dbg !29
  %38 = add i32 %34, %37, !dbg !30
  %39 = mul i32 %33, %.frozen
  %.decomposed = sub i32 %27, %39
  %40 = sdiv i32 %.decomposed, %36, !dbg !31
  %41 = shl i32 %38, 4, !dbg !32
  %42 = or i32 %41, %16, !dbg !33
  %43 = srem i32 %42, %3, !dbg !34
  %44 = shl i32 %40, 7, !dbg !35
  %45 = or i32 %44, %18, !dbg !36
  %46 = srem i32 %45, %4, !dbg !37
  %47 = mul i32 %43, %6, !dbg !38
  %48 = add i32 %47, %20, !dbg !39
  %49 = sext i32 %48 to i64, !dbg !40
  %50 = getelementptr i16, ptr addrspace(1) %0, i64 %49, !dbg !40
  %51 = mul i32 %23, %7, !dbg !41
  %52 = mul i32 %24, %7, !dbg !41
  %53 = mul i32 %25, %7, !dbg !41
  %54 = mul i32 %26, %7, !dbg !41
  %55 = add i32 %46, %51, !dbg !42
  %56 = add i32 %46, %52, !dbg !42
  %57 = add i32 %46, %53, !dbg !42
  %58 = add i32 %46, %54, !dbg !42
  %59 = sext i32 %55 to i64, !dbg !43
  %60 = getelementptr i16, ptr addrspace(1) %1, i64 %59, !dbg !43
  %61 = sext i32 %56 to i64, !dbg !43
  %62 = getelementptr i16, ptr addrspace(1) %1, i64 %61, !dbg !43
  %63 = sext i32 %57 to i64, !dbg !43
  %64 = getelementptr i16, ptr addrspace(1) %1, i64 %63, !dbg !43
  %65 = sext i32 %58 to i64, !dbg !43
  %66 = getelementptr i16, ptr addrspace(1) %1, i64 %65, !dbg !43
  %67 = add i32 %5, 31, !dbg !44
  %68 = sdiv i32 %67, 32, !dbg !46
  %69 = shl i32 %7, 5, !dbg !47
  %70 = icmp sgt i32 %67, 31, !dbg !48
  %71 = icmp slt i32 %20, %5, !dbg !49
  %72 = and i1 %71, %70, !dbg !50
  %73 = lshr i32 %16, 1, !dbg !50
  %74 = and i32 %73, 3, !dbg !50
  %75 = shl nuw nsw i32 %16, 5, !dbg !50
  %76 = lshr i32 %19, 1, !dbg !50
  %77 = xor i32 %74, %76, !dbg !50
  %78 = shl nuw nsw i32 %77, 3, !dbg !50
  %79 = shl i32 %10, 2, !dbg !50
  %80 = and i32 %79, 4, !dbg !50
  %81 = or i32 %78, %80, !dbg !50
  %82 = or i32 %81, %75, !dbg !50
  %83 = zext i32 %82 to i64, !dbg !50
  %84 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %83, !dbg !50
  %85 = select i1 %72, i32 8, i32 0, !dbg !50
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %84, ptr addrspace(1) %50, i32 %85) #3, !dbg !50
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !50
  %86 = icmp slt i32 %23, %5, !dbg !51
  %87 = icmp slt i32 %24, %5, !dbg !51
  %88 = icmp slt i32 %25, %5, !dbg !51
  %89 = icmp slt i32 %26, %5, !dbg !51
  %90 = and i1 %86, %70, !dbg !52
  %91 = and i1 %87, %70, !dbg !52
  %92 = and i1 %88, %70, !dbg !52
  %93 = and i1 %89, %70, !dbg !52
  %94 = shl nuw nsw i32 %23, 7, !dbg !52
  %95 = shl nuw nsw i32 %23, 3, !dbg !52
  %96 = xor i32 %95, %18, !dbg !52
  %97 = or i32 %96, %94, !dbg !52
  %98 = zext i32 %97 to i64, !dbg !52
  %99 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 5120), i64 %98, !dbg !52
  %100 = getelementptr i16, ptr addrspace(3) %99, i64 1024, !dbg !52
  %101 = getelementptr i16, ptr addrspace(3) %99, i64 2048, !dbg !52
  %102 = getelementptr i16, ptr addrspace(3) %99, i64 3072, !dbg !52
  %103 = select i1 %90, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %60, i32 %103) #3, !dbg !52
  %104 = select i1 %91, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %100, ptr addrspace(1) %62, i32 %104) #3, !dbg !52
  %105 = select i1 %92, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %101, ptr addrspace(1) %64, i32 %105) #3, !dbg !52
  %106 = select i1 %93, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %102, ptr addrspace(1) %66, i32 %106) #3, !dbg !52
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !52
  %107 = getelementptr i16, ptr addrspace(1) %50, i64 32, !dbg !53
  %108 = sext i32 %69 to i64, !dbg !54
  %109 = getelementptr i16, ptr addrspace(1) %60, i64 %108, !dbg !54
  %110 = getelementptr i16, ptr addrspace(1) %62, i64 %108, !dbg !54
  %111 = getelementptr i16, ptr addrspace(1) %64, i64 %108, !dbg !54
  %112 = getelementptr i16, ptr addrspace(1) %66, i64 %108, !dbg !54
  %113 = icmp sgt i32 %67, 63, !dbg !48
  %114 = add i32 %5, -32, !dbg !55
  %115 = icmp slt i32 %20, %114, !dbg !49
  %116 = and i1 %115, %113, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %117 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %83, !dbg !50
  %118 = select i1 %116, i32 8, i32 0, !dbg !50
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %117, ptr addrspace(1) %107, i32 %118) #3, !dbg !50
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !50
  %119 = icmp slt i32 %23, %114, !dbg !51
  %120 = icmp slt i32 %24, %114, !dbg !51
  %121 = icmp slt i32 %25, %114, !dbg !51
  %122 = icmp slt i32 %26, %114, !dbg !51
  %123 = and i1 %119, %113, !dbg !52
  %124 = and i1 %120, %113, !dbg !52
  %125 = and i1 %121, %113, !dbg !52
  %126 = and i1 %122, %113, !dbg !52
  %127 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 13312), i64 %98, !dbg !52
  %128 = getelementptr i16, ptr addrspace(3) %127, i64 1024, !dbg !52
  %129 = getelementptr i16, ptr addrspace(3) %127, i64 2048, !dbg !52
  %130 = getelementptr i16, ptr addrspace(3) %127, i64 3072, !dbg !52
  %131 = select i1 %123, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %127, ptr addrspace(1) %109, i32 %131) #3, !dbg !52
  %132 = select i1 %124, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %128, ptr addrspace(1) %110, i32 %132) #3, !dbg !52
  %133 = select i1 %125, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %129, ptr addrspace(1) %111, i32 %133) #3, !dbg !52
  %134 = select i1 %126, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %130, ptr addrspace(1) %112, i32 %134) #3, !dbg !52
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !52
  %135 = getelementptr i16, ptr addrspace(1) %50, i64 64, !dbg !53
  %136 = getelementptr i16, ptr addrspace(1) %109, i64 %108, !dbg !54
  %137 = getelementptr i16, ptr addrspace(1) %110, i64 %108, !dbg !54
  %138 = getelementptr i16, ptr addrspace(1) %111, i64 %108, !dbg !54
  %139 = getelementptr i16, ptr addrspace(1) %112, i64 %108, !dbg !54
  %140 = icmp sgt i32 %67, 95, !dbg !48
  %141 = add i32 %5, -64, !dbg !55
  %142 = icmp slt i32 %20, %141, !dbg !49
  %143 = and i1 %142, %140, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %144 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %83, !dbg !50
  %145 = select i1 %143, i32 8, i32 0, !dbg !50
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %144, ptr addrspace(1) %135, i32 %145) #3, !dbg !50
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !50
  %146 = icmp slt i32 %23, %141, !dbg !51
  %147 = icmp slt i32 %24, %141, !dbg !51
  %148 = icmp slt i32 %25, %141, !dbg !51
  %149 = icmp slt i32 %26, %141, !dbg !51
  %150 = and i1 %146, %140, !dbg !52
  %151 = and i1 %147, %140, !dbg !52
  %152 = and i1 %148, %140, !dbg !52
  %153 = and i1 %149, %140, !dbg !52
  %154 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 21504), i64 %98, !dbg !52
  %155 = getelementptr i16, ptr addrspace(3) %154, i64 1024, !dbg !52
  %156 = getelementptr i16, ptr addrspace(3) %154, i64 2048, !dbg !52
  %157 = getelementptr i16, ptr addrspace(3) %154, i64 3072, !dbg !52
  %158 = select i1 %150, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %154, ptr addrspace(1) %136, i32 %158) #3, !dbg !52
  %159 = select i1 %151, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %155, ptr addrspace(1) %137, i32 %159) #3, !dbg !52
  %160 = select i1 %152, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %156, ptr addrspace(1) %138, i32 %160) #3, !dbg !52
  %161 = select i1 %153, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %157, ptr addrspace(1) %139, i32 %161) #3, !dbg !52
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !52
  %162 = getelementptr i16, ptr addrspace(1) %50, i64 96, !dbg !53
  %163 = getelementptr i16, ptr addrspace(1) %136, i64 %108, !dbg !54
  %164 = getelementptr i16, ptr addrspace(1) %137, i64 %108, !dbg !54
  %165 = getelementptr i16, ptr addrspace(1) %138, i64 %108, !dbg !54
  %166 = getelementptr i16, ptr addrspace(1) %139, i64 %108, !dbg !54
  %167 = icmp sgt i32 %67, 127, !dbg !48
  %168 = add i32 %5, -96, !dbg !55
  %169 = icmp slt i32 %20, %168, !dbg !49
  %170 = and i1 %169, %167, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %171 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 3072), i64 %83, !dbg !50
  %172 = select i1 %170, i32 8, i32 0, !dbg !50
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %171, ptr addrspace(1) %162, i32 %172) #3, !dbg !50
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !50
  %173 = icmp slt i32 %23, %168, !dbg !51
  %174 = icmp slt i32 %24, %168, !dbg !51
  %175 = icmp slt i32 %25, %168, !dbg !51
  %176 = icmp slt i32 %26, %168, !dbg !51
  %177 = and i1 %173, %167, !dbg !52
  %178 = and i1 %174, %167, !dbg !52
  %179 = and i1 %175, %167, !dbg !52
  %180 = and i1 %176, %167, !dbg !52
  %181 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 29696), i64 %98, !dbg !52
  %182 = getelementptr i16, ptr addrspace(3) %181, i64 1024, !dbg !52
  %183 = getelementptr i16, ptr addrspace(3) %181, i64 2048, !dbg !52
  %184 = getelementptr i16, ptr addrspace(3) %181, i64 3072, !dbg !52
  %185 = select i1 %177, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %181, ptr addrspace(1) %163, i32 %185) #3, !dbg !52
  %186 = select i1 %178, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %182, ptr addrspace(1) %164, i32 %186) #3, !dbg !52
  %187 = select i1 %179, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %183, ptr addrspace(1) %165, i32 %187) #3, !dbg !52
  %188 = select i1 %180, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %184, ptr addrspace(1) %166, i32 %188) #3, !dbg !52
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !52
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %189 = and i32 %10, 15, !dbg !50
  %190 = xor i32 %21, %76, !dbg !50
  %191 = shl nuw nsw i32 %189, 5, !dbg !50
  %192 = shl nuw nsw i32 %190, 3, !dbg !50
  %193 = or i32 %192, %191, !dbg !50
  %194 = zext i32 %193 to i64, !dbg !50
  %195 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %194, !dbg !50
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %195) #3, !dbg !50
  %197 = shl nuw nsw i32 %21, 2, !dbg !52
  %198 = or i32 %197, %13, !dbg !52
  %199 = xor i32 %198, %19, !dbg !52
  %200 = shl nuw nsw i32 %189, 7, !dbg !52
  %201 = shl nuw nsw i32 %199, 3, !dbg !52
  %202 = or i32 %201, %200, !dbg !52
  %203 = zext i32 %202 to i64, !dbg !52
  %204 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 5120), i64 %203, !dbg !52
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %204) #3, !dbg !52
  %206 = or i32 %198, 8, !dbg !52
  %207 = xor i32 %206, %19, !dbg !52
  %208 = shl nuw nsw i32 %207, 3, !dbg !52
  %209 = add nuw nsw i32 %208, %200, !dbg !52
  %210 = zext i32 %209 to i64, !dbg !52
  %211 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 5120), i64 %210, !dbg !52
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %211) #3, !dbg !52
  br i1 %70, label %.lr.ph, label %._crit_edge, !dbg !48

.lr.ph:                                           ; preds = %9, %.lr.ph
  %.pn105148 = phi { i32, i32, i32, i32 } [ %403, %.lr.ph ], [ %212, %9 ]
  %.pn101147 = phi { i32, i32, i32, i32 } [ %401, %.lr.ph ], [ %205, %9 ]
  %.pn81146 = phi { i32, i32, i32, i32 } [ %399, %.lr.ph ], [ %196, %9 ]
  %213 = phi i32 [ %397, %.lr.ph ], [ 1, %9 ]
  %214 = phi i32 [ %396, %.lr.ph ], [ 4, %9 ]
  %215 = phi i32 [ %349, %.lr.ph ], [ 3, %9 ]
  %.pn24145 = phi ptr addrspace(1) [ %362, %.lr.ph ], [ %166, %9 ]
  %.pn40144 = phi ptr addrspace(1) [ %361, %.lr.ph ], [ %165, %9 ]
  %.pn56143 = phi ptr addrspace(1) [ %360, %.lr.ph ], [ %164, %9 ]
  %.pn72142 = phi ptr addrspace(1) [ %359, %.lr.ph ], [ %163, %9 ]
  %.pn8141 = phi ptr addrspace(1) [ %358, %.lr.ph ], [ %162, %9 ]
  %216 = phi { ptr addrspace(3), i32, i32, i32, i32 } [ %395, %.lr.ph ], [ { ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 5120), i32 128, i32 1, i32 0, i32 0 }, %9 ]
  %217 = phi { ptr addrspace(3), i32, i32, i32, i32 } [ %387, %.lr.ph ], [ { ptr addrspace(3) @global_smem, i32 32, i32 1, i32 0, i32 0 }, %9 ]
  %218 = phi { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } [ %348, %.lr.ph ], [ zeroinitializer, %9 ]
  %219 = phi i32 [ %404, %.lr.ph ], [ 0, %9 ]
  %.pn100 = extractvalue { i32, i32, i32, i32 } %.pn101147, 0, !dbg !52
  %.pn98 = extractvalue { i32, i32, i32, i32 } %.pn101147, 1, !dbg !52
  %.pn96 = extractvalue { i32, i32, i32, i32 } %.pn101147, 2, !dbg !52
  %.pn94 = extractvalue { i32, i32, i32, i32 } %.pn101147, 3, !dbg !52
  %.pn92 = extractvalue { i32, i32, i32, i32 } %.pn105148, 0, !dbg !52
  %.pn90 = extractvalue { i32, i32, i32, i32 } %.pn105148, 1, !dbg !52
  %.pn88 = extractvalue { i32, i32, i32, i32 } %.pn105148, 2, !dbg !52
  %.pn86 = extractvalue { i32, i32, i32, i32 } %.pn105148, 3, !dbg !52
  %.pn80 = extractvalue { i32, i32, i32, i32 } %.pn81146, 0, !dbg !50
  %.pn78 = extractvalue { i32, i32, i32, i32 } %.pn81146, 2, !dbg !50
  %.pn76 = extractvalue { i32, i32, i32, i32 } %.pn81146, 1, !dbg !50
  %.pn74 = extractvalue { i32, i32, i32, i32 } %.pn81146, 3, !dbg !50
  %220 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %217, 0, !dbg !50
  %221 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %217, 1, !dbg !50
  %222 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %217, 2, !dbg !50
  %223 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %217, 4, !dbg !50
  %224 = add i32 %223, 16, !dbg !50
  %225 = shl i32 %222, 4, !dbg !50
  %226 = sext i32 %225 to i64, !dbg !50
  %227 = getelementptr i16, ptr addrspace(3) %220, i64 %226, !dbg !50
  %228 = lshr i32 %224, 3, !dbg !50
  %229 = add nuw nsw i32 %228, %21, !dbg !50
  %230 = xor i32 %229, %76, !dbg !50
  %231 = mul i32 %221, %189, !dbg !50
  %232 = shl i32 %230, 3, !dbg !50
  %233 = add i32 %232, %231, !dbg !50
  %234 = sub i32 -16, %223, !dbg !50
  %235 = sext i32 %234 to i64, !dbg !50
  %236 = getelementptr i16, ptr addrspace(3) %227, i64 %235, !dbg !50
  %237 = sext i32 %233 to i64, !dbg !50
  %238 = getelementptr i16, ptr addrspace(3) %236, i64 %237, !dbg !50
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %238) #3, !dbg !50
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !50
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !50
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !50
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !50
  %244 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %216, 0, !dbg !52
  %245 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %216, 1, !dbg !52
  %246 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %216, 4, !dbg !52
  %247 = shl i32 %245, 4, !dbg !52
  %248 = sext i32 %247 to i64, !dbg !52
  %249 = getelementptr i16, ptr addrspace(3) %244, i64 %248, !dbg !52
  %250 = lshr i32 %246, 3, !dbg !52
  %251 = add nuw nsw i32 %250, %198, !dbg !52
  %252 = xor i32 %251, %19, !dbg !52
  %253 = mul i32 %245, %189, !dbg !52
  %254 = shl i32 %252, 3, !dbg !52
  %255 = add i32 %254, %253, !dbg !52
  %256 = sub i32 0, %246, !dbg !52
  %257 = sext i32 %256 to i64, !dbg !52
  %258 = getelementptr i16, ptr addrspace(3) %249, i64 %257, !dbg !52
  %259 = sext i32 %255 to i64, !dbg !52
  %260 = getelementptr i16, ptr addrspace(3) %258, i64 %259, !dbg !52
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %260) #3, !dbg !52
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !52
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !52
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !52
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !52
  %266 = add nuw nsw i32 %250, %206, !dbg !52
  %267 = xor i32 %266, %19, !dbg !52
  %268 = shl i32 %267, 3, !dbg !52
  %269 = add i32 %268, %253, !dbg !52
  %270 = sext i32 %269 to i64, !dbg !52
  %271 = getelementptr i16, ptr addrspace(3) %258, i64 %270, !dbg !52
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %271) #3, !dbg !52
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !52
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !52
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !52
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !52
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 0, !dbg !56
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 1, !dbg !56
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 2, !dbg !56
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 3, !dbg !56
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 4, !dbg !56
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 5, !dbg !56
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 6, !dbg !56
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 7, !dbg !56
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 8, !dbg !56
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 9, !dbg !56
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 10, !dbg !56
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 11, !dbg !56
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 12, !dbg !56
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 13, !dbg !56
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 14, !dbg !56
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %218, 15, !dbg !56
  %293 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn80, i32 %.pn76, i32 %.pn78, i32 %.pn74, i32 %.pn100, i32 %.pn98, float %277, float %278, float %279, float %280) #3, !dbg !56
  %294 = extractvalue { float, float, float, float } %293, 0, !dbg !56
  %295 = extractvalue { float, float, float, float } %293, 1, !dbg !56
  %296 = extractvalue { float, float, float, float } %293, 2, !dbg !56
  %297 = extractvalue { float, float, float, float } %293, 3, !dbg !56
  %298 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn80, i32 %.pn76, i32 %.pn78, i32 %.pn74, i32 %.pn96, i32 %.pn94, float %281, float %282, float %283, float %284) #3, !dbg !56
  %299 = extractvalue { float, float, float, float } %298, 0, !dbg !56
  %300 = extractvalue { float, float, float, float } %298, 1, !dbg !56
  %301 = extractvalue { float, float, float, float } %298, 2, !dbg !56
  %302 = extractvalue { float, float, float, float } %298, 3, !dbg !56
  %303 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn80, i32 %.pn76, i32 %.pn78, i32 %.pn74, i32 %.pn92, i32 %.pn90, float %285, float %286, float %287, float %288) #3, !dbg !56
  %304 = extractvalue { float, float, float, float } %303, 0, !dbg !56
  %305 = extractvalue { float, float, float, float } %303, 1, !dbg !56
  %306 = extractvalue { float, float, float, float } %303, 2, !dbg !56
  %307 = extractvalue { float, float, float, float } %303, 3, !dbg !56
  %308 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn80, i32 %.pn76, i32 %.pn78, i32 %.pn74, i32 %.pn88, i32 %.pn86, float %289, float %290, float %291, float %292) #3, !dbg !56
  %309 = extractvalue { float, float, float, float } %308, 0, !dbg !56
  %310 = extractvalue { float, float, float, float } %308, 1, !dbg !56
  %311 = extractvalue { float, float, float, float } %308, 2, !dbg !56
  %312 = extractvalue { float, float, float, float } %308, 3, !dbg !56
  %313 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %240, i32 %241, i32 %242, i32 %243, i32 %262, i32 %263, float %294, float %295, float %296, float %297) #3, !dbg !56
  %314 = extractvalue { float, float, float, float } %313, 0, !dbg !56
  %315 = extractvalue { float, float, float, float } %313, 1, !dbg !56
  %316 = extractvalue { float, float, float, float } %313, 2, !dbg !56
  %317 = extractvalue { float, float, float, float } %313, 3, !dbg !56
  %318 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %240, i32 %241, i32 %242, i32 %243, i32 %264, i32 %265, float %299, float %300, float %301, float %302) #3, !dbg !56
  %319 = extractvalue { float, float, float, float } %318, 0, !dbg !56
  %320 = extractvalue { float, float, float, float } %318, 1, !dbg !56
  %321 = extractvalue { float, float, float, float } %318, 2, !dbg !56
  %322 = extractvalue { float, float, float, float } %318, 3, !dbg !56
  %323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %240, i32 %241, i32 %242, i32 %243, i32 %273, i32 %274, float %304, float %305, float %306, float %307) #3, !dbg !56
  %324 = extractvalue { float, float, float, float } %323, 0, !dbg !56
  %325 = extractvalue { float, float, float, float } %323, 1, !dbg !56
  %326 = extractvalue { float, float, float, float } %323, 2, !dbg !56
  %327 = extractvalue { float, float, float, float } %323, 3, !dbg !56
  %328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %240, i32 %241, i32 %242, i32 %243, i32 %275, i32 %276, float %309, float %310, float %311, float %312) #3, !dbg !56
  %329 = extractvalue { float, float, float, float } %328, 0, !dbg !56
  %330 = extractvalue { float, float, float, float } %328, 1, !dbg !56
  %331 = extractvalue { float, float, float, float } %328, 2, !dbg !56
  %332 = extractvalue { float, float, float, float } %328, 3, !dbg !56
  %333 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %314, 0, !dbg !56
  %334 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, float %315, 1, !dbg !56
  %335 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %334, float %316, 2, !dbg !56
  %336 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, float %317, 3, !dbg !56
  %337 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %336, float %319, 4, !dbg !56
  %338 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %337, float %320, 5, !dbg !56
  %339 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %338, float %321, 6, !dbg !56
  %340 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, float %322, 7, !dbg !56
  %341 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %340, float %324, 8, !dbg !56
  %342 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %341, float %325, 9, !dbg !56
  %343 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %342, float %326, 10, !dbg !56
  %344 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %343, float %327, 11, !dbg !56
  %345 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %344, float %329, 12, !dbg !56
  %346 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, float %330, 13, !dbg !56
  %347 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, float %331, 14, !dbg !56
  %348 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, float %332, 15, !dbg !56
  %349 = add nuw nsw i32 %215, 1, !dbg !48
  %350 = icmp slt i32 %349, %68, !dbg !48
  %.urem = urem i32 %214, 5
  %.urem150 = urem i32 %213, 5
  %351 = shl i32 %349, 5, !dbg !57
  %352 = sub i32 %5, %351, !dbg !55
  %353 = icmp slt i32 %20, %352, !dbg !49
  %354 = icmp slt i32 %23, %352, !dbg !51
  %355 = icmp slt i32 %24, %352, !dbg !51
  %356 = icmp slt i32 %25, %352, !dbg !51
  %357 = icmp slt i32 %26, %352, !dbg !51
  %358 = getelementptr i16, ptr addrspace(1) %.pn8141, i64 32, !dbg !53
  %359 = getelementptr i16, ptr addrspace(1) %.pn72142, i64 %108, !dbg !54
  %360 = getelementptr i16, ptr addrspace(1) %.pn56143, i64 %108, !dbg !54
  %361 = getelementptr i16, ptr addrspace(1) %.pn40144, i64 %108, !dbg !54
  %362 = getelementptr i16, ptr addrspace(1) %.pn24145, i64 %108, !dbg !54
  %363 = and i1 %350, %353, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %364 = shl nuw nsw i32 %.urem, 9, !dbg !50
  %365 = zext i32 %364 to i64
  %gep = getelementptr i16, ptr addrspace(3) %84, i64 %365, !dbg !50
  %366 = select i1 %363, i32 8, i32 0, !dbg !50
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %358, i32 %366) #3, !dbg !50
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !50
  %367 = and i1 %350, %354, !dbg !52
  %368 = and i1 %350, %355, !dbg !52
  %369 = and i1 %350, %356, !dbg !52
  %370 = and i1 %350, %357, !dbg !52
  %371 = shl nuw nsw i32 %.urem, 12, !dbg !52
  %372 = zext i32 %371 to i64
  %gep140 = getelementptr i16, ptr addrspace(3) %99, i64 %372, !dbg !52
  %373 = getelementptr i16, ptr addrspace(3) %gep140, i64 1024, !dbg !52
  %374 = getelementptr i16, ptr addrspace(3) %gep140, i64 2048, !dbg !52
  %375 = getelementptr i16, ptr addrspace(3) %gep140, i64 3072, !dbg !52
  %376 = select i1 %367, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep140, ptr addrspace(1) %359, i32 %376) #3, !dbg !52
  %377 = select i1 %368, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %373, ptr addrspace(1) %360, i32 %377) #3, !dbg !52
  %378 = select i1 %369, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %374, ptr addrspace(1) %361, i32 %378) #3, !dbg !52
  %379 = select i1 %370, i32 16, i32 0, !dbg !52
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %375, ptr addrspace(1) %362, i32 %379) #3, !dbg !52
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !52
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %380 = shl nuw nsw i32 %.urem150, 9, !dbg !50
  %381 = zext i32 %380 to i64
  %382 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %381, !dbg !50
  %383 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } undef, ptr addrspace(3) %382, 0, !dbg !50
  %384 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %383, i32 32, 1, !dbg !50
  %385 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %384, i32 1, 2, !dbg !50
  %386 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %385, i32 0, 3, !dbg !50
  %387 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %386, i32 0, 4, !dbg !50
  %388 = shl nuw nsw i32 %.urem150, 12, !dbg !52
  %389 = zext i32 %388 to i64
  %390 = getelementptr i16, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 5120), i64 %389, !dbg !52
  %391 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } undef, ptr addrspace(3) %390, 0, !dbg !52
  %392 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %391, i32 128, 1, !dbg !52
  %393 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %392, i32 1, 2, !dbg !52
  %394 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %393, i32 0, 3, !dbg !52
  %395 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %394, i32 0, 4, !dbg !52
  %396 = add nuw nsw i32 %214, 1, !dbg !48
  %397 = add nuw nsw i32 %213, 1, !dbg !48
  %398 = getelementptr i16, ptr addrspace(3) %382, i64 %194, !dbg !50
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %398) #3, !dbg !50
  %400 = getelementptr i16, ptr addrspace(3) %390, i64 %203, !dbg !52
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %400) #3, !dbg !52
  %402 = getelementptr i16, ptr addrspace(3) %390, i64 %210, !dbg !52
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %402) #3, !dbg !52
  %404 = add nuw nsw i32 %219, 1, !dbg !48
  %405 = icmp slt i32 %404, %68, !dbg !48
  br i1 %405, label %.lr.ph, label %._crit_edge, !dbg !48

._crit_edge:                                      ; preds = %.lr.ph, %9
  %.lcssa = phi { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } [ zeroinitializer, %9 ], [ %348, %.lr.ph ]
  %406 = shl nuw nsw i32 %11, 2, !dbg !9
  %407 = or i32 %44, %406, !dbg !36
  %408 = or i32 %13, 12, !dbg !8
  %409 = or i32 %41, %408, !dbg !33
  %410 = or i32 %13, 8, !dbg !8
  %411 = or i32 %41, %410, !dbg !33
  %412 = or i32 %13, 4, !dbg !8
  %413 = or i32 %41, %412, !dbg !33
  %414 = or i32 %41, %13, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %415 = mul i32 %414, %8, !dbg !58
  %416 = mul i32 %413, %8, !dbg !58
  %417 = mul i32 %411, %8, !dbg !58
  %418 = mul i32 %409, %8, !dbg !58
  %419 = sext i32 %415 to i64, !dbg !59
  %420 = getelementptr float, ptr addrspace(1) %2, i64 %419, !dbg !59
  %421 = sext i32 %416 to i64, !dbg !59
  %422 = getelementptr float, ptr addrspace(1) %2, i64 %421, !dbg !59
  %423 = sext i32 %417 to i64, !dbg !59
  %424 = getelementptr float, ptr addrspace(1) %2, i64 %423, !dbg !59
  %425 = sext i32 %418 to i64, !dbg !59
  %426 = getelementptr float, ptr addrspace(1) %2, i64 %425, !dbg !59
  %427 = sext i32 %407 to i64, !dbg !60
  %428 = getelementptr float, ptr addrspace(1) %420, i64 %427, !dbg !60
  %429 = getelementptr float, ptr addrspace(1) %422, i64 %427, !dbg !60
  %430 = getelementptr float, ptr addrspace(1) %424, i64 %427, !dbg !60
  %431 = getelementptr float, ptr addrspace(1) %426, i64 %427, !dbg !60
  %432 = icmp slt i32 %414, %3, !dbg !61
  %433 = icmp slt i32 %413, %3, !dbg !61
  %434 = icmp slt i32 %411, %3, !dbg !61
  %435 = icmp slt i32 %409, %3, !dbg !61
  %436 = icmp slt i32 %407, %4, !dbg !62
  %437 = and i1 %432, %436, !dbg !63
  %438 = and i1 %433, %436, !dbg !63
  %439 = and i1 %434, %436, !dbg !63
  %440 = and i1 %435, %436, !dbg !63
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 0, !dbg !64
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 1, !dbg !64
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 2, !dbg !64
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 3, !dbg !64
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 4, !dbg !64
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 5, !dbg !64
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 6, !dbg !64
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 7, !dbg !64
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 8, !dbg !64
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 9, !dbg !64
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 10, !dbg !64
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 11, !dbg !64
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 12, !dbg !64
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 13, !dbg !64
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 14, !dbg !64
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 15, !dbg !64
  %457 = lshr i32 %11, 2, !dbg !64
  %458 = shl i32 %10, 1, !dbg !64
  %459 = and i32 %458, 6, !dbg !64
  %460 = shl nuw nsw i32 %13, 3, !dbg !64
  %461 = or i32 %460, %459, !dbg !64
  %462 = mul nuw nsw i32 %457, 132, !dbg !64
  %463 = add nuw nsw i32 %461, %462, !dbg !64
  %464 = zext i32 %463 to i64, !dbg !64
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i64 %464, !dbg !64
  %466 = insertelement <2 x float> undef, float %441, i64 0, !dbg !64
  %467 = insertelement <2 x float> %466, float %442, i64 1, !dbg !64
  store <2 x float> %467, ptr addrspace(3) %465, align 8, !dbg !64
  %468 = add nuw nsw i32 %462, 1056, !dbg !64
  %469 = add nuw nsw i32 %468, %461, !dbg !64
  %470 = zext i32 %469 to i64, !dbg !64
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i64 %470, !dbg !64
  %472 = insertelement <2 x float> undef, float %443, i64 0, !dbg !64
  %473 = insertelement <2 x float> %472, float %444, i64 1, !dbg !64
  store <2 x float> %473, ptr addrspace(3) %471, align 8, !dbg !64
  %474 = or i32 %461, 32, !dbg !64
  %475 = add nuw nsw i32 %474, %462, !dbg !64
  %476 = zext i32 %475 to i64, !dbg !64
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i64 %476, !dbg !64
  %478 = insertelement <2 x float> undef, float %445, i64 0, !dbg !64
  %479 = insertelement <2 x float> %478, float %446, i64 1, !dbg !64
  store <2 x float> %479, ptr addrspace(3) %477, align 8, !dbg !64
  %480 = add nuw nsw i32 %474, %468, !dbg !64
  %481 = zext i32 %480 to i64, !dbg !64
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i64 %481, !dbg !64
  %483 = insertelement <2 x float> undef, float %447, i64 0, !dbg !64
  %484 = insertelement <2 x float> %483, float %448, i64 1, !dbg !64
  store <2 x float> %484, ptr addrspace(3) %482, align 8, !dbg !64
  %485 = or i32 %461, 64, !dbg !64
  %486 = add nuw nsw i32 %485, %462, !dbg !64
  %487 = zext i32 %486 to i64, !dbg !64
  %488 = getelementptr float, ptr addrspace(3) @global_smem, i64 %487, !dbg !64
  %489 = insertelement <2 x float> undef, float %449, i64 0, !dbg !64
  %490 = insertelement <2 x float> %489, float %450, i64 1, !dbg !64
  store <2 x float> %490, ptr addrspace(3) %488, align 8, !dbg !64
  %491 = add nuw nsw i32 %485, %468, !dbg !64
  %492 = zext i32 %491 to i64, !dbg !64
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i64 %492, !dbg !64
  %494 = insertelement <2 x float> undef, float %451, i64 0, !dbg !64
  %495 = insertelement <2 x float> %494, float %452, i64 1, !dbg !64
  store <2 x float> %495, ptr addrspace(3) %493, align 8, !dbg !64
  %496 = or i32 %461, 96, !dbg !64
  %497 = add nuw nsw i32 %496, %462, !dbg !64
  %498 = zext i32 %497 to i64, !dbg !64
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i64 %498, !dbg !64
  %500 = insertelement <2 x float> undef, float %453, i64 0, !dbg !64
  %501 = insertelement <2 x float> %500, float %454, i64 1, !dbg !64
  store <2 x float> %501, ptr addrspace(3) %499, align 8, !dbg !64
  %502 = add nuw nsw i32 %496, %468, !dbg !64
  %503 = zext i32 %502 to i64, !dbg !64
  %504 = getelementptr float, ptr addrspace(3) @global_smem, i64 %503, !dbg !64
  %505 = insertelement <2 x float> undef, float %455, i64 0, !dbg !64
  %506 = insertelement <2 x float> %505, float %456, i64 1, !dbg !64
  store <2 x float> %506, ptr addrspace(3) %504, align 8, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %507 = mul nuw nsw i32 %13, 132, !dbg !64
  %508 = add nuw nsw i32 %507, %406, !dbg !64
  %509 = zext i32 %508 to i64, !dbg !64
  %510 = getelementptr float, ptr addrspace(3) @global_smem, i64 %509, !dbg !64
  %511 = load <4 x i32>, ptr addrspace(3) %510, align 16, !dbg !64
  %512 = mul nuw nsw i32 %412, 132, !dbg !64
  %513 = add nuw nsw i32 %512, %406, !dbg !64
  %514 = zext i32 %513 to i64, !dbg !64
  %515 = getelementptr float, ptr addrspace(3) @global_smem, i64 %514, !dbg !64
  %516 = load <4 x i32>, ptr addrspace(3) %515, align 16, !dbg !64
  %517 = mul nuw nsw i32 %410, 132, !dbg !64
  %518 = add nuw nsw i32 %517, %406, !dbg !64
  %519 = zext i32 %518 to i64, !dbg !64
  %520 = getelementptr float, ptr addrspace(3) @global_smem, i64 %519, !dbg !64
  %521 = load <4 x i32>, ptr addrspace(3) %520, align 16, !dbg !64
  %522 = mul nuw nsw i32 %408, 132, !dbg !64
  %523 = add nuw nsw i32 %522, %406, !dbg !64
  %524 = zext i32 %523 to i64, !dbg !64
  %525 = getelementptr float, ptr addrspace(3) @global_smem, i64 %524, !dbg !64
  %526 = load <4 x i32>, ptr addrspace(3) %525, align 16, !dbg !64
  %.extract = extractelement <4 x i32> %511, i64 0, !dbg !64
  %.extract110 = extractelement <4 x i32> %511, i64 1, !dbg !64
  %.extract112 = extractelement <4 x i32> %511, i64 2, !dbg !64
  %.extract114 = extractelement <4 x i32> %511, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %428, i1 %437) #3, !dbg !64
  %.extract116 = extractelement <4 x i32> %516, i64 0, !dbg !64
  %.extract118 = extractelement <4 x i32> %516, i64 1, !dbg !64
  %.extract120 = extractelement <4 x i32> %516, i64 2, !dbg !64
  %.extract122 = extractelement <4 x i32> %516, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %429, i1 %438) #3, !dbg !64
  %.extract124 = extractelement <4 x i32> %521, i64 0, !dbg !64
  %.extract126 = extractelement <4 x i32> %521, i64 1, !dbg !64
  %.extract128 = extractelement <4 x i32> %521, i64 2, !dbg !64
  %.extract130 = extractelement <4 x i32> %521, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract124, i32 %.extract126, i32 %.extract128, i32 %.extract130, ptr addrspace(1) %430, i1 %439) #3, !dbg !64
  %.extract132 = extractelement <4 x i32> %526, i64 0, !dbg !64
  %.extract134 = extractelement <4 x i32> %526, i64 1, !dbg !64
  %.extract136 = extractelement <4 x i32> %526, i64 2, !dbg !64
  %.extract138 = extractelement <4 x i32> %526, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract132, i32 %.extract134, i32 %.extract136, i32 %.extract138, ptr addrspace(1) %431, i1 %440) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "config_compute_bfp16.py", directory: "/home/master/triton/baichuan/gemm_triton")
!3 = !{ptr @matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c, !"kernel", i32 1}
!4 = !{ptr @matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c", linkageName: "matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c", scope: !2, file: !2, line: 79, type: !6, scopeLine: 79, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 99, column: 51, scope: !5)
!9 = !DILocation(line: 100, column: 51, scope: !5)
!10 = !DILocation(line: 102, column: 60, scope: !5)
!11 = !DILocation(line: 103, column: 29, scope: !5)
!12 = !DILocation(line: 89, column: 24, scope: !5)
!13 = !DILocation(line: 21, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !5, file: !15, discriminator: 0)
!15 = !DIFile(filename: "standard.py", directory: "/home/master/anaconda3/lib/python3.11/site-packages/triton/language")
!16 = !DILocation(line: 90, column: 27, scope: !14)
!17 = !DILocation(line: 21, column: 28, scope: !14, inlinedAt: !16)
!18 = !DILocation(line: 21, scope: !14, inlinedAt: !19)
!19 = !DILocation(line: 91, column: 27, scope: !14)
!20 = !DILocation(line: 21, column: 28, scope: !14, inlinedAt: !19)
!21 = !DILocation(line: 92, column: 38, scope: !5)
!22 = !DILocation(line: 93, column: 22, scope: !5)
!23 = !DILocation(line: 94, column: 29, scope: !5)
!24 = !DILocation(line: 95, column: 35, scope: !5)
!25 = !DILocation(line: 1385, column: 27, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !5, file: !27, discriminator: 0)
!27 = !DIFile(filename: "core.py", directory: "/home/master/anaconda3/lib/python3.11/site-packages/triton/language")
!28 = !DILocation(line: 95, column: 48, scope: !26)
!29 = !DILocation(line: 96, column: 33, scope: !5)
!30 = !DILocation(line: 96, column: 27, scope: !5)
!31 = !DILocation(line: 97, column: 40, scope: !5)
!32 = !DILocation(line: 99, column: 23, scope: !5)
!33 = !DILocation(line: 99, column: 38, scope: !5)
!34 = !DILocation(line: 99, column: 68, scope: !5)
!35 = !DILocation(line: 100, column: 23, scope: !5)
!36 = !DILocation(line: 100, column: 38, scope: !5)
!37 = !DILocation(line: 100, column: 68, scope: !5)
!38 = !DILocation(line: 102, column: 41, scope: !5)
!39 = !DILocation(line: 102, column: 53, scope: !5)
!40 = !DILocation(line: 102, column: 22, scope: !5)
!41 = !DILocation(line: 103, column: 40, scope: !5)
!42 = !DILocation(line: 103, column: 52, scope: !5)
!43 = !DILocation(line: 103, column: 22, scope: !5)
!44 = !DILocation(line: 21, scope: !14, inlinedAt: !45)
!45 = !DILocation(line: 106, column: 33, scope: !14)
!46 = !DILocation(line: 21, column: 28, scope: !14, inlinedAt: !45)
!47 = !DILocation(line: 111, column: 33, scope: !5)
!48 = !DILocation(line: 106, column: 22, scope: !5)
!49 = !DILocation(line: 107, column: 51, scope: !5)
!50 = !DILocation(line: 107, column: 20, scope: !5)
!51 = !DILocation(line: 108, column: 51, scope: !5)
!52 = !DILocation(line: 108, column: 20, scope: !5)
!53 = !DILocation(line: 110, column: 18, scope: !5)
!54 = !DILocation(line: 111, column: 18, scope: !5)
!55 = !DILocation(line: 107, column: 55, scope: !5)
!56 = !DILocation(line: 109, scope: !5)
!57 = !DILocation(line: 107, column: 59, scope: !5)
!58 = !DILocation(line: 118, column: 33, scope: !5)
!59 = !DILocation(line: 118, column: 21, scope: !5)
!60 = !DILocation(line: 118, column: 52, scope: !5)
!61 = !DILocation(line: 119, column: 33, scope: !5)
!62 = !DILocation(line: 119, column: 58, scope: !5)
!63 = !DILocation(line: 119, column: 39, scope: !5)
!64 = !DILocation(line: 120, column: 21, scope: !5)
!65 = !DILocation(line: 120, column: 4, scope: !5)
