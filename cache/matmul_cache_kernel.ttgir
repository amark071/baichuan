#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_cache_kernel_0d1d2d3d4d5d6d7c8d9c10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c3_i32 = arith.constant 3 : i32
    %c64_i32 = arith.constant 64 : i32
    %c2_i32 = arith.constant 2 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>
    %cst_0 = arith.constant dense<32> : tensor<32x32xi32, #blocked>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf16, #blocked>
    %c31_i32 = arith.constant 31 : i32
    %c4_i32 = arith.constant 4 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.addi %arg3, %c31_i32 : i32
    %2 = arith.divsi %1, %c32_i32 : i32
    %3 = arith.addi %arg4, %c31_i32 : i32
    %4 = arith.divsi %3, %c32_i32 : i32
    %5 = arith.muli %4, %c4_i32 : i32
    %6 = arith.divsi %0, %5 : i32
    %7 = arith.muli %6, %c4_i32 : i32
    %8 = arith.subi %2, %7 : i32
    %9 = "triton_gpu.cmpi"(%8, %c4_i32) <{predicate = 2 : i64}> : (i32, i32) -> i1
    %10 = arith.select %9, %8, %c4_i32 : i32
    %11 = arith.remsi %0, %10 : i32
    %12 = arith.addi %7, %11 : i32
    %13 = arith.remsi %0, %5 : i32
    %14 = arith.divsi %13, %10 : i32
    %15 = arith.muli %12, %c32_i32 : i32
    %16 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %17 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %18 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %20 = tt.splat %15 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %21 = tt.splat %15 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %22 = arith.addi %20, %16 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %23 = arith.addi %21, %19 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %24 = tt.splat %arg3 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %25 = arith.remsi %22, %24 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %26 = arith.muli %14, %c32_i32 : i32
    %27 = tt.splat %26 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %28 = tt.splat %26 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %29 = arith.addi %27, %17 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %30 = arith.addi %28, %18 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %31 = tt.splat %arg4 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %32 = arith.remsi %29, %31 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %33 = tt.expand_dims %25 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %34 = tt.splat %arg6 : (i32) -> tensor<32x1xi32, #blocked>
    %35 = arith.muli %33, %34 : tensor<32x1xi32, #blocked>
    %36 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %37 = tt.broadcast %35 : (tensor<32x1xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %38 = tt.broadcast %36 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %39 = arith.addi %37, %38 : tensor<32x32xi32, #blocked>
    %40 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>, #blocked>
    %41 = tt.addptr %40, %39 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %42 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %43 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked>
    %44 = arith.muli %42, %43 : tensor<32x1xi32, #blocked>
    %45 = tt.expand_dims %32 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %46 = tt.broadcast %44 : (tensor<32x1xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %47 = tt.broadcast %45 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %48 = arith.addi %46, %47 : tensor<32x32xi32, #blocked>
    %49 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>, #blocked>
    %50 = tt.addptr %49, %48 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %51 = arith.addi %arg5, %c31_i32 : i32
    %52 = arith.divsi %51, %c32_i32 : i32
    %53 = arith.muli %arg7, %c32_i32 : i32
    %54 = tt.splat %53 : (i32) -> tensor<32x32xi32, #blocked>
    %55 = arith.cmpi sgt, %52, %c0_i32 : i32
    %56 = tt.splat %arg5 : (i32) -> tensor<1x32xi32, #blocked>
    %57 = "triton_gpu.cmpi"(%36, %56) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
    %58 = tt.broadcast %57 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %59 = triton_gpu.alloc_tensor : tensor<4x32x32xf16, #shared>
    %60 = tt.splat %55 : (i1) -> tensor<32x32xi1, #blocked>
    %61 = arith.andi %58, %60 : tensor<32x32xi1, #blocked>
    %62 = triton_gpu.insert_slice_async %41, %59, %c0_i32, %61, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %63 = tt.splat %arg5 : (i32) -> tensor<32x1xi32, #blocked>
    %64 = "triton_gpu.cmpi"(%42, %63) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
    %65 = tt.broadcast %64 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %66 = triton_gpu.alloc_tensor : tensor<4x32x32xf16, #shared>
    %67 = arith.andi %65, %60 : tensor<32x32xi1, #blocked>
    %68 = triton_gpu.insert_slice_async %50, %66, %c0_i32, %67, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %69 = tt.addptr %41, %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %70 = tt.addptr %50, %54 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %71 = arith.cmpi sgt, %52, %c1_i32 : i32
    %72 = arith.subi %arg5, %c32_i32 : i32
    %73 = tt.splat %72 : (i32) -> tensor<1x32xi32, #blocked>
    %74 = "triton_gpu.cmpi"(%36, %73) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
    %75 = tt.broadcast %74 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %76 = tt.splat %71 : (i1) -> tensor<32x32xi1, #blocked>
    %77 = arith.andi %75, %76 : tensor<32x32xi1, #blocked>
    %78 = triton_gpu.insert_slice_async %69, %62, %c1_i32, %77, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %79 = tt.splat %72 : (i32) -> tensor<32x1xi32, #blocked>
    %80 = "triton_gpu.cmpi"(%42, %79) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
    %81 = tt.broadcast %80 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %82 = arith.andi %81, %76 : tensor<32x32xi1, #blocked>
    %83 = triton_gpu.insert_slice_async %70, %68, %c1_i32, %82, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %84 = tt.addptr %69, %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %85 = tt.addptr %70, %54 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %86 = arith.cmpi sgt, %52, %c2_i32 : i32
    %87 = arith.subi %arg5, %c64_i32 : i32
    %88 = tt.splat %87 : (i32) -> tensor<1x32xi32, #blocked>
    %89 = "triton_gpu.cmpi"(%36, %88) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
    %90 = tt.broadcast %89 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %91 = tt.splat %86 : (i1) -> tensor<32x32xi1, #blocked>
    %92 = arith.andi %90, %91 : tensor<32x32xi1, #blocked>
    %93 = triton_gpu.insert_slice_async %84, %78, %c2_i32, %92, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %94 = tt.splat %87 : (i32) -> tensor<32x1xi32, #blocked>
    %95 = "triton_gpu.cmpi"(%42, %94) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
    %96 = tt.broadcast %95 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %97 = arith.andi %96, %91 : tensor<32x32xi1, #blocked>
    %98 = triton_gpu.insert_slice_async %85, %83, %c2_i32, %97, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    triton_gpu.async_wait {num = 4 : i32}
    %99 = triton_gpu.extract_slice %93[0, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
    %100 = triton_gpu.extract_slice %98[0, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
    %101 = triton_gpu.extract_slice %99[0, 0] [32, 16] [1, 1] : tensor<32x32xf16, #shared> to tensor<32x16xf16, #shared>
    %102 = triton_gpu.convert_layout %101 : (tensor<32x16xf16, #shared>) -> tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>
    %103 = triton_gpu.extract_slice %100[0, 0] [16, 32] [1, 1] : tensor<32x32xf16, #shared> to tensor<16x32xf16, #shared>
    %104 = triton_gpu.convert_layout %103 : (tensor<16x32xf16, #shared>) -> tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
    %105:14 = scf.for %arg9 = %c0_i32 to %52 step %c1_i32 iter_args(%arg10 = %cst, %arg11 = %41, %arg12 = %50, %arg13 = %93, %arg14 = %98, %arg15 = %99, %arg16 = %100, %arg17 = %84, %arg18 = %85, %arg19 = %c2_i32, %arg20 = %c3_i32, %arg21 = %c1_i32, %arg22 = %102, %arg23 = %104) -> (tensor<32x32xf32, #mma>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<4x32x32xf16, #shared>, tensor<4x32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, i32, i32, i32, tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>)  : i32 {
      %123 = triton_gpu.extract_slice %arg15[0, 16] [32, 16] [1, 1] : tensor<32x32xf16, #shared> to tensor<32x16xf16, #shared>
      %124 = triton_gpu.convert_layout %123 : (tensor<32x16xf16, #shared>) -> tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>
      %125 = triton_gpu.extract_slice %arg16[16, 0] [16, 32] [1, 1] : tensor<32x32xf16, #shared> to tensor<16x32xf16, #shared>
      %126 = triton_gpu.convert_layout %125 : (tensor<16x32xf16, #shared>) -> tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
      %127 = tt.dot %arg22, %arg23, %arg10 {allowTF32 = true} : tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<32x32xf32, #mma>
      %128 = tt.dot %124, %126, %127 {allowTF32 = true} : tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<32x32xf32, #mma>
      %129 = tt.addptr %arg11, %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %130 = tt.addptr %arg12, %54 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %131 = arith.addi %arg19, %c1_i32 : i32
      %132 = arith.cmpi slt, %131, %52 : i32
      %133 = arith.remsi %arg20, %c4_i32 : i32
      %134 = arith.remsi %arg21, %c4_i32 : i32
      %135 = arith.muli %131, %c32_i32 : i32
      %136 = arith.subi %arg5, %135 : i32
      %137 = tt.splat %136 : (i32) -> tensor<1x32xi32, #blocked>
      %138 = "triton_gpu.cmpi"(%36, %137) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
      %139 = tt.broadcast %138 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
      %140 = tt.splat %136 : (i32) -> tensor<32x1xi32, #blocked>
      %141 = "triton_gpu.cmpi"(%42, %140) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
      %142 = tt.broadcast %141 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
      %143 = tt.addptr %arg17, %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %144 = tt.addptr %arg18, %54 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %145 = tt.splat %132 : (i1) -> tensor<32x32xi1, #blocked>
      %146 = arith.andi %139, %145 : tensor<32x32xi1, #blocked>
      %147 = triton_gpu.insert_slice_async %143, %arg13, %133, %146, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
      triton_gpu.async_commit_group
      %148 = arith.andi %142, %145 : tensor<32x32xi1, #blocked>
      %149 = triton_gpu.insert_slice_async %144, %arg14, %133, %148, %cst_1 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
      triton_gpu.async_commit_group
      triton_gpu.async_wait {num = 4 : i32}
      %150 = triton_gpu.extract_slice %147[%134, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
      %151 = triton_gpu.extract_slice %149[%134, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
      %152 = arith.addi %arg20, %c1_i32 : i32
      %153 = arith.addi %arg21, %c1_i32 : i32
      %154 = triton_gpu.extract_slice %150[0, 0] [32, 16] [1, 1] : tensor<32x32xf16, #shared> to tensor<32x16xf16, #shared>
      %155 = triton_gpu.convert_layout %154 : (tensor<32x16xf16, #shared>) -> tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>
      %156 = triton_gpu.extract_slice %151[0, 0] [16, 32] [1, 1] : tensor<32x32xf16, #shared> to tensor<16x32xf16, #shared>
      %157 = triton_gpu.convert_layout %156 : (tensor<16x32xf16, #shared>) -> tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
      scf.yield %128, %129, %130, %147, %149, %150, %151, %143, %144, %131, %152, %153, %155, %157 : tensor<32x32xf32, #mma>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<4x32x32xf16, #shared>, tensor<4x32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, i32, i32, i32, tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
    }
    triton_gpu.async_wait {num = 0 : i32}
    %106 = tt.expand_dims %23 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %107 = tt.splat %arg8 : (i32) -> tensor<32x1xi32, #blocked1>
    %108 = arith.muli %107, %106 : tensor<32x1xi32, #blocked1>
    %109 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %110 = tt.addptr %109, %108 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %111 = tt.expand_dims %30 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %112 = tt.broadcast %110 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %113 = tt.broadcast %111 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %114 = tt.addptr %112, %113 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %115 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked1>
    %116 = "triton_gpu.cmpi"(%106, %115) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked1>, tensor<32x1xi32, #blocked1>) -> tensor<32x1xi1, #blocked1>
    %117 = tt.splat %arg4 : (i32) -> tensor<1x32xi32, #blocked1>
    %118 = "triton_gpu.cmpi"(%111, %117) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked1>, tensor<1x32xi32, #blocked1>) -> tensor<1x32xi1, #blocked1>
    %119 = tt.broadcast %116 : (tensor<32x1xi1, #blocked1>) -> tensor<32x32xi1, #blocked1>
    %120 = tt.broadcast %118 : (tensor<1x32xi1, #blocked1>) -> tensor<32x32xi1, #blocked1>
    %121 = arith.andi %119, %120 : tensor<32x32xi1, #blocked1>
    %122 = triton_gpu.convert_layout %105#0 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked1>
    tt.store %114, %122, %121 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked1>
    tt.return
  }
}
