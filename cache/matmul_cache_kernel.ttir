module {
  tt.func public @matmul_cache_kernel_0d1d2d3d4d5d6d7c8d9c10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf16>
    %c31_i32 = arith.constant 31 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant dense<32> : tensor<32x32xi32>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %c32_i32 = arith.constant 32 : i32
    %c4_i32 = arith.constant 4 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.addi %arg3, %c31_i32 : i32
    %2 = arith.divsi %1, %c32_i32 : i32
    %3 = arith.addi %arg4, %c31_i32 : i32
    %4 = arith.divsi %3, %c32_i32 : i32
    %5 = arith.muli %4, %c4_i32 : i32
    %6 = arith.divsi %0, %5 : i32
    %7 = arith.muli %6, %c4_i32 : i32
    %8 = arith.subi %2, %7 : i32
    %9 = arith.cmpi slt, %8, %c4_i32 : i32
    %10 = arith.select %9, %8, %c4_i32 : i32
    %11 = arith.remsi %0, %10 : i32
    %12 = arith.addi %7, %11 : i32
    %13 = arith.remsi %0, %5 : i32
    %14 = arith.divsi %13, %10 : i32
    %15 = arith.muli %12, %c32_i32 : i32
    %16 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %17 = tt.splat %15 : (i32) -> tensor<32xi32>
    %18 = arith.addi %17, %16 : tensor<32xi32>
    %19 = tt.splat %arg3 : (i32) -> tensor<32xi32>
    %20 = arith.remsi %18, %19 : tensor<32xi32>
    %21 = arith.muli %14, %c32_i32 : i32
    %22 = tt.splat %21 : (i32) -> tensor<32xi32>
    %23 = arith.addi %22, %16 : tensor<32xi32>
    %24 = tt.splat %arg4 : (i32) -> tensor<32xi32>
    %25 = arith.remsi %23, %24 : tensor<32xi32>
    %26 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %27 = tt.splat %arg6 : (i32) -> tensor<32x1xi32>
    %28 = arith.muli %26, %27 : tensor<32x1xi32>
    %29 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %30 = tt.broadcast %28 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %31 = tt.broadcast %29 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %32 = arith.addi %30, %31 : tensor<32x32xi32>
    %33 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>>
    %34 = tt.addptr %33, %32 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
    %35 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %36 = tt.splat %arg7 : (i32) -> tensor<32x1xi32>
    %37 = arith.muli %35, %36 : tensor<32x1xi32>
    %38 = tt.expand_dims %25 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %39 = tt.broadcast %37 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %40 = tt.broadcast %38 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %41 = arith.addi %39, %40 : tensor<32x32xi32>
    %42 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>>
    %43 = tt.addptr %42, %41 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
    %44 = arith.addi %arg5, %c31_i32 : i32
    %45 = arith.divsi %44, %c32_i32 : i32
    %46 = arith.muli %arg7, %c32_i32 : i32
    %47 = tt.splat %46 : (i32) -> tensor<32x32xi32>
    %48:3 = scf.for %arg9 = %c0_i32 to %45 step %c1_i32 iter_args(%arg10 = %cst_1, %arg11 = %34, %arg12 = %43) -> (tensor<32x32xf32>, tensor<32x32x!tt.ptr<f16>>, tensor<32x32x!tt.ptr<f16>>)  : i32 {
      %65 = arith.muli %arg9, %c32_i32 : i32
      %66 = arith.subi %arg5, %65 : i32
      %67 = tt.splat %66 : (i32) -> tensor<1x32xi32>
      %68 = arith.cmpi slt, %29, %67 : tensor<1x32xi32>
      %69 = tt.broadcast %68 : (tensor<1x32xi1>) -> tensor<32x32xi1>
      %70 = tt.load %arg11, %69, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf16>
      %71 = tt.splat %66 : (i32) -> tensor<32x1xi32>
      %72 = arith.cmpi slt, %35, %71 : tensor<32x1xi32>
      %73 = tt.broadcast %72 : (tensor<32x1xi1>) -> tensor<32x32xi1>
      %74 = tt.load %arg12, %73, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf16>
      %75 = tt.dot %70, %74, %arg10 {allowTF32 = true} : tensor<32x32xf16> * tensor<32x32xf16> -> tensor<32x32xf32>
      %76 = tt.addptr %arg11, %cst_0 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
      %77 = tt.addptr %arg12, %47 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
      scf.yield %75, %76, %77 : tensor<32x32xf32>, tensor<32x32x!tt.ptr<f16>>, tensor<32x32x!tt.ptr<f16>>
    }
    %49 = tt.expand_dims %18 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %50 = tt.splat %arg8 : (i32) -> tensor<32x1xi32>
    %51 = arith.muli %50, %49 : tensor<32x1xi32>
    %52 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %53 = tt.addptr %52, %51 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %54 = tt.expand_dims %23 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %55 = tt.broadcast %53 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %56 = tt.broadcast %54 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %57 = tt.addptr %55, %56 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %58 = tt.splat %arg3 : (i32) -> tensor<32x1xi32>
    %59 = arith.cmpi slt, %49, %58 : tensor<32x1xi32>
    %60 = tt.splat %arg4 : (i32) -> tensor<1x32xi32>
    %61 = arith.cmpi slt, %54, %60 : tensor<1x32xi32>
    %62 = tt.broadcast %59 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %63 = tt.broadcast %61 : (tensor<1x32xi1>) -> tensor<32x32xi1>
    %64 = arith.andi %62, %63 : tensor<32x32xi1>
    tt.store %57, %48#0, %64 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32>
    tt.return
  }
}
