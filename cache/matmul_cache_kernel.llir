; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @matmul_cache_kernel_0d1d2d3d4d5d6d7c8d9c10d11c(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %11 = and i32 %10, 31, !dbg !8
  %12 = lshr i32 %10, 5, !dbg !8
  %13 = and i32 %12, 1, !dbg !8
  %14 = lshr i32 %11, 2, !dbg !8
  %15 = shl nuw nsw i32 %13, 3, !dbg !8
  %16 = or i32 %15, %14, !dbg !8
  %17 = or i32 %16, 16, !dbg !8
  %18 = and i32 %10, 3, !dbg !8
  %19 = shl nuw nsw i32 %18, 3, !dbg !8
  %20 = and i32 %10, 7, !dbg !8
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %22 = add i32 %3, 31, !dbg !10
  %23 = sdiv i32 %22, 32, !dbg !14
  %24 = add i32 %4, 31, !dbg !15
  %25 = sdiv i32 %24, 32, !dbg !17
  %26 = shl nsw i32 %25, 2, !dbg !18
  %.frozen = freeze i32 %26
  %27 = sdiv i32 %21, %.frozen, !dbg !19
  %28 = shl i32 %27, 2, !dbg !20
  %29 = sub i32 %23, %28, !dbg !21
  %30 = tail call i32 @llvm.smin.i32(i32 %29, i32 4), !dbg !22
  %31 = srem i32 %21, %30, !dbg !26
  %32 = add i32 %28, %31, !dbg !27
  %33 = mul i32 %27, %.frozen
  %.decomposed = sub i32 %21, %33
  %34 = sdiv i32 %.decomposed, %30, !dbg !28
  %35 = shl i32 %32, 5, !dbg !29
  %36 = or i32 %35, %16, !dbg !30
  %37 = or i32 %35, %17, !dbg !30
  %38 = srem i32 %36, %3, !dbg !31
  %39 = srem i32 %37, %3, !dbg !31
  %40 = shl i32 %34, 5, !dbg !32
  %41 = or i32 %40, %19, !dbg !33
  %42 = srem i32 %41, %4, !dbg !34
  %43 = mul i32 %38, %6, !dbg !35
  %44 = mul i32 %39, %6, !dbg !35
  %45 = add i32 %43, %19, !dbg !36
  %46 = add i32 %44, %19, !dbg !36
  %47 = sext i32 %45 to i64, !dbg !37
  %48 = getelementptr half, ptr addrspace(1) %0, i64 %47, !dbg !37
  %49 = sext i32 %46 to i64, !dbg !37
  %50 = getelementptr half, ptr addrspace(1) %0, i64 %49, !dbg !37
  %51 = mul i32 %16, %7, !dbg !38
  %52 = mul i32 %17, %7, !dbg !38
  %53 = add i32 %42, %51, !dbg !39
  %54 = add i32 %42, %52, !dbg !39
  %55 = sext i32 %53 to i64, !dbg !40
  %56 = getelementptr half, ptr addrspace(1) %1, i64 %55, !dbg !40
  %57 = sext i32 %54 to i64, !dbg !40
  %58 = getelementptr half, ptr addrspace(1) %1, i64 %57, !dbg !40
  %59 = add i32 %5, 31, !dbg !41
  %60 = sdiv i32 %59, 32, !dbg !43
  %61 = shl i32 %7, 5, !dbg !44
  %62 = icmp sgt i32 %59, 31, !dbg !45
  %63 = icmp slt i32 %19, %5, !dbg !46
  %64 = and i1 %63, %62, !dbg !47
  %65 = shl nuw nsw i32 %16, 5, !dbg !47
  %66 = shl i32 %10, 3, !dbg !47
  %67 = xor i32 %66, %10, !dbg !47
  %68 = and i32 %67, 24, !dbg !47
  %69 = or i32 %65, %68, !dbg !47
  %70 = zext i32 %69 to i64, !dbg !47
  %71 = getelementptr half, ptr addrspace(3) @global_smem, i64 %70, !dbg !47
  %72 = getelementptr half, ptr addrspace(3) %71, i64 512, !dbg !47
  %73 = select i1 %64, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %71, ptr addrspace(1) %48, i32 %73) #3, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %50, i32 %73) #3, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !47
  %74 = icmp slt i32 %16, %5, !dbg !48
  %75 = icmp slt i32 %17, %5, !dbg !48
  %76 = and i1 %74, %62, !dbg !49
  %77 = and i1 %75, %62, !dbg !49
  %78 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %70, !dbg !49
  %79 = getelementptr half, ptr addrspace(3) %78, i64 512, !dbg !49
  %80 = select i1 %76, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %78, ptr addrspace(1) %56, i32 %80) #3, !dbg !49
  %81 = select i1 %77, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %58, i32 %81) #3, !dbg !49
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !49
  %82 = getelementptr half, ptr addrspace(1) %48, i64 32, !dbg !50
  %83 = getelementptr half, ptr addrspace(1) %50, i64 32, !dbg !50
  %84 = sext i32 %61 to i64, !dbg !51
  %85 = getelementptr half, ptr addrspace(1) %56, i64 %84, !dbg !51
  %86 = getelementptr half, ptr addrspace(1) %58, i64 %84, !dbg !51
  %87 = icmp sgt i32 %59, 63, !dbg !45
  %88 = add i32 %5, -32, !dbg !52
  %89 = icmp slt i32 %19, %88, !dbg !46
  %90 = and i1 %89, %87, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %91 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %70, !dbg !47
  %92 = getelementptr half, ptr addrspace(3) %91, i64 512, !dbg !47
  %93 = select i1 %90, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %91, ptr addrspace(1) %82, i32 %93) #3, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %92, ptr addrspace(1) %83, i32 %93) #3, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !47
  %94 = icmp slt i32 %16, %88, !dbg !48
  %95 = icmp slt i32 %17, %88, !dbg !48
  %96 = and i1 %94, %87, !dbg !49
  %97 = and i1 %95, %87, !dbg !49
  %98 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 10240), i64 %70, !dbg !49
  %99 = getelementptr half, ptr addrspace(3) %98, i64 512, !dbg !49
  %100 = select i1 %96, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %98, ptr addrspace(1) %85, i32 %100) #3, !dbg !49
  %101 = select i1 %97, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %86, i32 %101) #3, !dbg !49
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !49
  %102 = getelementptr half, ptr addrspace(1) %48, i64 64, !dbg !50
  %103 = getelementptr half, ptr addrspace(1) %50, i64 64, !dbg !50
  %104 = getelementptr half, ptr addrspace(1) %85, i64 %84, !dbg !51
  %105 = getelementptr half, ptr addrspace(1) %86, i64 %84, !dbg !51
  %106 = icmp sgt i32 %59, 95, !dbg !45
  %107 = add i32 %5, -64, !dbg !52
  %108 = icmp slt i32 %19, %107, !dbg !46
  %109 = and i1 %108, %106, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %110 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %70, !dbg !47
  %111 = getelementptr half, ptr addrspace(3) %110, i64 512, !dbg !47
  %112 = select i1 %109, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %102, i32 %112) #3, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %111, ptr addrspace(1) %103, i32 %112) #3, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !47
  %113 = icmp slt i32 %16, %107, !dbg !48
  %114 = icmp slt i32 %17, %107, !dbg !48
  %115 = and i1 %113, %106, !dbg !49
  %116 = and i1 %114, %106, !dbg !49
  %117 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 12288), i64 %70, !dbg !49
  %118 = getelementptr half, ptr addrspace(3) %117, i64 512, !dbg !49
  %119 = select i1 %115, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %117, ptr addrspace(1) %104, i32 %119) #3, !dbg !49
  %120 = select i1 %116, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %118, ptr addrspace(1) %105, i32 %120) #3, !dbg !49
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !49
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %121 = lshr i32 %11, 4, !dbg !47
  %122 = lshr i32 %20, 1, !dbg !47
  %123 = shl nuw nsw i32 %13, 4, !dbg !47
  %124 = and i32 %10, 15, !dbg !47
  %125 = or i32 %124, %123, !dbg !47
  %126 = xor i32 %121, %122, !dbg !47
  %127 = shl nuw nsw i32 %125, 5, !dbg !47
  %128 = shl nuw nsw i32 %126, 3, !dbg !47
  %129 = or i32 %127, %128, !dbg !47
  %130 = zext i32 %129 to i64, !dbg !47
  %131 = getelementptr half, ptr addrspace(3) @global_smem, i64 %130, !dbg !47
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %131) #3, !dbg !47
  %133 = shl nuw nsw i32 %124, 5, !dbg !49
  %134 = or i32 %128, %133, !dbg !49
  %135 = zext i32 %134 to i64, !dbg !49
  %136 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %135, !dbg !49
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %136) #3, !dbg !49
  %138 = or i32 %121, 2, !dbg !49
  %139 = xor i32 %138, %122, !dbg !49
  %140 = shl nuw nsw i32 %139, 3, !dbg !49
  %141 = or i32 %140, %133, !dbg !49
  %142 = zext i32 %141 to i64, !dbg !49
  %143 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %142, !dbg !49
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %143) #3, !dbg !49
  br i1 %62, label %.lr.ph, label %._crit_edge, !dbg !45

.lr.ph:                                           ; preds = %9, %.lr.ph
  %.pn97139 = phi { i32, i32, i32, i32 } [ %323, %.lr.ph ], [ %144, %9 ]
  %.pn93138 = phi { i32, i32, i32, i32 } [ %321, %.lr.ph ], [ %137, %9 ]
  %.pn73137 = phi { i32, i32, i32, i32 } [ %319, %.lr.ph ], [ %132, %9 ]
  %145 = phi i32 [ %317, %.lr.ph ], [ 1, %9 ]
  %146 = phi i32 [ %316, %.lr.ph ], [ 3, %9 ]
  %147 = phi i32 [ %281, %.lr.ph ], [ 2, %9 ]
  %.pn48136 = phi ptr addrspace(1) [ %291, %.lr.ph ], [ %105, %9 ]
  %.pn64135 = phi ptr addrspace(1) [ %290, %.lr.ph ], [ %104, %9 ]
  %.pn16134 = phi ptr addrspace(1) [ %289, %.lr.ph ], [ %103, %9 ]
  %.pn32133 = phi ptr addrspace(1) [ %288, %.lr.ph ], [ %102, %9 ]
  %148 = phi { ptr addrspace(3), i32, i32, i32, i32 } [ %315, %.lr.ph ], [ { ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 32, i32 1, i32 0, i32 0 }, %9 ]
  %149 = phi { ptr addrspace(3), i32, i32, i32, i32 } [ %309, %.lr.ph ], [ { ptr addrspace(3) @global_smem, i32 32, i32 1, i32 0, i32 0 }, %9 ]
  %150 = phi { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } [ %280, %.lr.ph ], [ zeroinitializer, %9 ]
  %151 = phi i32 [ %324, %.lr.ph ], [ 0, %9 ]
  %.pn92 = extractvalue { i32, i32, i32, i32 } %.pn93138, 0, !dbg !49
  %.pn90 = extractvalue { i32, i32, i32, i32 } %.pn93138, 1, !dbg !49
  %.pn88 = extractvalue { i32, i32, i32, i32 } %.pn93138, 2, !dbg !49
  %.pn86 = extractvalue { i32, i32, i32, i32 } %.pn93138, 3, !dbg !49
  %.pn84 = extractvalue { i32, i32, i32, i32 } %.pn97139, 0, !dbg !49
  %.pn82 = extractvalue { i32, i32, i32, i32 } %.pn97139, 1, !dbg !49
  %.pn80 = extractvalue { i32, i32, i32, i32 } %.pn97139, 2, !dbg !49
  %.pn78 = extractvalue { i32, i32, i32, i32 } %.pn97139, 3, !dbg !49
  %.pn72 = extractvalue { i32, i32, i32, i32 } %.pn73137, 0, !dbg !47
  %.pn70 = extractvalue { i32, i32, i32, i32 } %.pn73137, 2, !dbg !47
  %.pn68 = extractvalue { i32, i32, i32, i32 } %.pn73137, 1, !dbg !47
  %.pn66 = extractvalue { i32, i32, i32, i32 } %.pn73137, 3, !dbg !47
  %152 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %149, 0, !dbg !47
  %153 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %149, 1, !dbg !47
  %154 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %149, 2, !dbg !47
  %155 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %149, 4, !dbg !47
  %156 = add i32 %155, 16, !dbg !47
  %157 = shl i32 %154, 4, !dbg !47
  %158 = sext i32 %157 to i64, !dbg !47
  %159 = getelementptr half, ptr addrspace(3) %152, i64 %158, !dbg !47
  %160 = lshr i32 %156, 3, !dbg !47
  %161 = add nuw nsw i32 %160, %121, !dbg !47
  %162 = xor i32 %161, %122, !dbg !47
  %163 = mul i32 %153, %125, !dbg !47
  %164 = shl i32 %162, 3, !dbg !47
  %165 = add i32 %164, %163, !dbg !47
  %166 = sub i32 -16, %155, !dbg !47
  %167 = sext i32 %166 to i64, !dbg !47
  %168 = getelementptr half, ptr addrspace(3) %159, i64 %167, !dbg !47
  %169 = sext i32 %165 to i64, !dbg !47
  %170 = getelementptr half, ptr addrspace(3) %168, i64 %169, !dbg !47
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %170) #3, !dbg !47
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !47
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !47
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !47
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !47
  %176 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %148, 0, !dbg !49
  %177 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %148, 1, !dbg !49
  %178 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %148, 4, !dbg !49
  %179 = shl i32 %177, 4, !dbg !49
  %180 = sext i32 %179 to i64, !dbg !49
  %181 = getelementptr half, ptr addrspace(3) %176, i64 %180, !dbg !49
  %182 = lshr i32 %178, 3, !dbg !49
  %183 = add nuw nsw i32 %182, %121, !dbg !49
  %184 = xor i32 %183, %122, !dbg !49
  %185 = mul i32 %177, %124, !dbg !49
  %186 = shl i32 %184, 3, !dbg !49
  %187 = add i32 %186, %185, !dbg !49
  %188 = sub i32 0, %178, !dbg !49
  %189 = sext i32 %188 to i64, !dbg !49
  %190 = getelementptr half, ptr addrspace(3) %181, i64 %189, !dbg !49
  %191 = sext i32 %187 to i64, !dbg !49
  %192 = getelementptr half, ptr addrspace(3) %190, i64 %191, !dbg !49
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %192) #3, !dbg !49
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !49
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !49
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !49
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !49
  %198 = add nuw nsw i32 %182, %138, !dbg !49
  %199 = xor i32 %198, %122, !dbg !49
  %200 = shl i32 %199, 3, !dbg !49
  %201 = add i32 %200, %185, !dbg !49
  %202 = sext i32 %201 to i64, !dbg !49
  %203 = getelementptr half, ptr addrspace(3) %190, i64 %202, !dbg !49
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %203) #3, !dbg !49
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !49
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !49
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !49
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !49
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 0, !dbg !53
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 1, !dbg !53
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 2, !dbg !53
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 3, !dbg !53
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 4, !dbg !53
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 5, !dbg !53
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 6, !dbg !53
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 7, !dbg !53
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 8, !dbg !53
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 9, !dbg !53
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 10, !dbg !53
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 11, !dbg !53
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 12, !dbg !53
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 13, !dbg !53
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 14, !dbg !53
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %150, 15, !dbg !53
  %225 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn72, i32 %.pn68, i32 %.pn70, i32 %.pn66, i32 %.pn92, i32 %.pn90, float %209, float %210, float %211, float %212) #3, !dbg !53
  %226 = extractvalue { float, float, float, float } %225, 0, !dbg !53
  %227 = extractvalue { float, float, float, float } %225, 1, !dbg !53
  %228 = extractvalue { float, float, float, float } %225, 2, !dbg !53
  %229 = extractvalue { float, float, float, float } %225, 3, !dbg !53
  %230 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn72, i32 %.pn68, i32 %.pn70, i32 %.pn66, i32 %.pn88, i32 %.pn86, float %213, float %214, float %215, float %216) #3, !dbg !53
  %231 = extractvalue { float, float, float, float } %230, 0, !dbg !53
  %232 = extractvalue { float, float, float, float } %230, 1, !dbg !53
  %233 = extractvalue { float, float, float, float } %230, 2, !dbg !53
  %234 = extractvalue { float, float, float, float } %230, 3, !dbg !53
  %235 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn72, i32 %.pn68, i32 %.pn70, i32 %.pn66, i32 %.pn84, i32 %.pn82, float %217, float %218, float %219, float %220) #3, !dbg !53
  %236 = extractvalue { float, float, float, float } %235, 0, !dbg !53
  %237 = extractvalue { float, float, float, float } %235, 1, !dbg !53
  %238 = extractvalue { float, float, float, float } %235, 2, !dbg !53
  %239 = extractvalue { float, float, float, float } %235, 3, !dbg !53
  %240 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn72, i32 %.pn68, i32 %.pn70, i32 %.pn66, i32 %.pn80, i32 %.pn78, float %221, float %222, float %223, float %224) #3, !dbg !53
  %241 = extractvalue { float, float, float, float } %240, 0, !dbg !53
  %242 = extractvalue { float, float, float, float } %240, 1, !dbg !53
  %243 = extractvalue { float, float, float, float } %240, 2, !dbg !53
  %244 = extractvalue { float, float, float, float } %240, 3, !dbg !53
  %245 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %172, i32 %173, i32 %174, i32 %175, i32 %194, i32 %195, float %226, float %227, float %228, float %229) #3, !dbg !53
  %246 = extractvalue { float, float, float, float } %245, 0, !dbg !53
  %247 = extractvalue { float, float, float, float } %245, 1, !dbg !53
  %248 = extractvalue { float, float, float, float } %245, 2, !dbg !53
  %249 = extractvalue { float, float, float, float } %245, 3, !dbg !53
  %250 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %172, i32 %173, i32 %174, i32 %175, i32 %196, i32 %197, float %231, float %232, float %233, float %234) #3, !dbg !53
  %251 = extractvalue { float, float, float, float } %250, 0, !dbg !53
  %252 = extractvalue { float, float, float, float } %250, 1, !dbg !53
  %253 = extractvalue { float, float, float, float } %250, 2, !dbg !53
  %254 = extractvalue { float, float, float, float } %250, 3, !dbg !53
  %255 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %172, i32 %173, i32 %174, i32 %175, i32 %205, i32 %206, float %236, float %237, float %238, float %239) #3, !dbg !53
  %256 = extractvalue { float, float, float, float } %255, 0, !dbg !53
  %257 = extractvalue { float, float, float, float } %255, 1, !dbg !53
  %258 = extractvalue { float, float, float, float } %255, 2, !dbg !53
  %259 = extractvalue { float, float, float, float } %255, 3, !dbg !53
  %260 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %172, i32 %173, i32 %174, i32 %175, i32 %207, i32 %208, float %241, float %242, float %243, float %244) #3, !dbg !53
  %261 = extractvalue { float, float, float, float } %260, 0, !dbg !53
  %262 = extractvalue { float, float, float, float } %260, 1, !dbg !53
  %263 = extractvalue { float, float, float, float } %260, 2, !dbg !53
  %264 = extractvalue { float, float, float, float } %260, 3, !dbg !53
  %265 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %246, 0, !dbg !53
  %266 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %265, float %247, 1, !dbg !53
  %267 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, float %248, 2, !dbg !53
  %268 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, float %249, 3, !dbg !53
  %269 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, float %251, 4, !dbg !53
  %270 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %269, float %252, 5, !dbg !53
  %271 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, float %253, 6, !dbg !53
  %272 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %271, float %254, 7, !dbg !53
  %273 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %272, float %256, 8, !dbg !53
  %274 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, float %257, 9, !dbg !53
  %275 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %274, float %258, 10, !dbg !53
  %276 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, float %259, 11, !dbg !53
  %277 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %276, float %261, 12, !dbg !53
  %278 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %277, float %262, 13, !dbg !53
  %279 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %278, float %263, 14, !dbg !53
  %280 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, float %264, 15, !dbg !53
  %281 = add nuw nsw i32 %147, 1, !dbg !45
  %282 = icmp slt i32 %281, %60, !dbg !45
  %283 = shl i32 %281, 5, !dbg !54
  %284 = sub i32 %5, %283, !dbg !52
  %285 = icmp slt i32 %19, %284, !dbg !46
  %286 = icmp slt i32 %16, %284, !dbg !48
  %287 = icmp slt i32 %17, %284, !dbg !48
  %288 = getelementptr half, ptr addrspace(1) %.pn32133, i64 32, !dbg !50
  %289 = getelementptr half, ptr addrspace(1) %.pn16134, i64 32, !dbg !50
  %290 = getelementptr half, ptr addrspace(1) %.pn64135, i64 %84, !dbg !51
  %291 = getelementptr half, ptr addrspace(1) %.pn48136, i64 %84, !dbg !51
  %292 = and i1 %282, %285, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.urem = shl i32 %146, 10, !dbg !47
  %293 = and i32 %.urem, 3072, !dbg !47
  %294 = zext i32 %293 to i64
  %gep = getelementptr half, ptr addrspace(3) %71, i64 %294, !dbg !47
  %295 = getelementptr half, ptr addrspace(3) %gep, i64 512, !dbg !47
  %296 = select i1 %292, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %288, i32 %296) #3, !dbg !47
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %295, ptr addrspace(1) %289, i32 %296) #3, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !47
  %297 = and i1 %282, %286, !dbg !49
  %298 = and i1 %282, %287, !dbg !49
  %gep132 = getelementptr half, ptr addrspace(3) %78, i64 %294, !dbg !49
  %299 = getelementptr half, ptr addrspace(3) %gep132, i64 512, !dbg !49
  %300 = select i1 %297, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep132, ptr addrspace(1) %290, i32 %300) #3, !dbg !49
  %301 = select i1 %298, i32 16, i32 0, !dbg !49
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %299, ptr addrspace(1) %291, i32 %301) #3, !dbg !49
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !49
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.urem141 = shl i32 %145, 10, !dbg !47
  %302 = and i32 %.urem141, 3072, !dbg !47
  %303 = zext i32 %302 to i64
  %304 = getelementptr half, ptr addrspace(3) @global_smem, i64 %303, !dbg !47
  %305 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } undef, ptr addrspace(3) %304, 0, !dbg !47
  %306 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %305, i32 32, 1, !dbg !47
  %307 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %306, i32 1, 2, !dbg !47
  %308 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %307, i32 0, 3, !dbg !47
  %309 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %308, i32 0, 4, !dbg !47
  %310 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %303, !dbg !49
  %311 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } undef, ptr addrspace(3) %310, 0, !dbg !49
  %312 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %311, i32 32, 1, !dbg !49
  %313 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %312, i32 1, 2, !dbg !49
  %314 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %313, i32 0, 3, !dbg !49
  %315 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %314, i32 0, 4, !dbg !49
  %316 = add nuw nsw i32 %146, 1, !dbg !45
  %317 = add nuw nsw i32 %145, 1, !dbg !45
  %318 = getelementptr half, ptr addrspace(3) %304, i64 %130, !dbg !47
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %318) #3, !dbg !47
  %320 = getelementptr half, ptr addrspace(3) %310, i64 %135, !dbg !49
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %320) #3, !dbg !49
  %322 = getelementptr half, ptr addrspace(3) %310, i64 %142, !dbg !49
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %322) #3, !dbg !49
  %324 = add nuw nsw i32 %151, 1, !dbg !45
  %325 = icmp slt i32 %324, %60, !dbg !45
  br i1 %325, label %.lr.ph, label %._crit_edge, !dbg !45

._crit_edge:                                      ; preds = %.lr.ph, %9
  %.lcssa = phi { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } [ zeroinitializer, %9 ], [ %280, %.lr.ph ]
  %326 = lshr i32 %11, 3, !dbg !8
  %327 = shl nuw nsw i32 %20, 2, !dbg !8
  %328 = or i32 %40, %327, !dbg !33
  %329 = shl nuw nsw i32 %13, 2, !dbg !8
  %330 = or i32 %329, %326, !dbg !8
  %331 = or i32 %330, 24, !dbg !8
  %332 = or i32 %35, %331, !dbg !30
  %333 = or i32 %330, 16, !dbg !8
  %334 = or i32 %35, %333, !dbg !30
  %335 = or i32 %330, 8, !dbg !8
  %336 = or i32 %35, %335, !dbg !30
  %337 = or i32 %35, %330, !dbg !30
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %338 = mul i32 %337, %8, !dbg !55
  %339 = mul i32 %336, %8, !dbg !55
  %340 = mul i32 %334, %8, !dbg !55
  %341 = mul i32 %332, %8, !dbg !55
  %342 = sext i32 %338 to i64, !dbg !56
  %343 = getelementptr float, ptr addrspace(1) %2, i64 %342, !dbg !56
  %344 = sext i32 %339 to i64, !dbg !56
  %345 = getelementptr float, ptr addrspace(1) %2, i64 %344, !dbg !56
  %346 = sext i32 %340 to i64, !dbg !56
  %347 = getelementptr float, ptr addrspace(1) %2, i64 %346, !dbg !56
  %348 = sext i32 %341 to i64, !dbg !56
  %349 = getelementptr float, ptr addrspace(1) %2, i64 %348, !dbg !56
  %350 = sext i32 %328 to i64, !dbg !57
  %351 = getelementptr float, ptr addrspace(1) %343, i64 %350, !dbg !57
  %352 = getelementptr float, ptr addrspace(1) %345, i64 %350, !dbg !57
  %353 = getelementptr float, ptr addrspace(1) %347, i64 %350, !dbg !57
  %354 = getelementptr float, ptr addrspace(1) %349, i64 %350, !dbg !57
  %355 = icmp slt i32 %337, %3, !dbg !58
  %356 = icmp slt i32 %336, %3, !dbg !58
  %357 = icmp slt i32 %334, %3, !dbg !58
  %358 = icmp slt i32 %332, %3, !dbg !58
  %359 = icmp slt i32 %328, %4, !dbg !59
  %360 = and i1 %355, %359, !dbg !60
  %361 = and i1 %356, %359, !dbg !60
  %362 = and i1 %357, %359, !dbg !60
  %363 = and i1 %358, %359, !dbg !60
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 0, !dbg !61
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 1, !dbg !61
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 2, !dbg !61
  %367 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 3, !dbg !61
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 4, !dbg !61
  %369 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 5, !dbg !61
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 6, !dbg !61
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 7, !dbg !61
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 8, !dbg !61
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 9, !dbg !61
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 10, !dbg !61
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 11, !dbg !61
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 12, !dbg !61
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 13, !dbg !61
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 14, !dbg !61
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %.lcssa, 15, !dbg !61
  %380 = shl nuw nsw i32 %18, 1, !dbg !61
  %381 = or i32 %123, %14, !dbg !61
  %382 = mul nuw nsw i32 %381, 36, !dbg !61
  %383 = add nuw nsw i32 %382, %380, !dbg !61
  %384 = zext i32 %383 to i64, !dbg !61
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i64 %384, !dbg !61
  %386 = insertelement <2 x float> undef, float %364, i64 0, !dbg !61
  %387 = insertelement <2 x float> %386, float %365, i64 1, !dbg !61
  store <2 x float> %387, ptr addrspace(3) %385, align 8, !dbg !61
  %388 = add nuw nsw i32 %382, 288, !dbg !61
  %389 = add nuw nsw i32 %388, %380, !dbg !61
  %390 = zext i32 %389 to i64, !dbg !61
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i64 %390, !dbg !61
  %392 = insertelement <2 x float> undef, float %366, i64 0, !dbg !61
  %393 = insertelement <2 x float> %392, float %367, i64 1, !dbg !61
  store <2 x float> %393, ptr addrspace(3) %391, align 8, !dbg !61
  %394 = or i32 %380, 8, !dbg !61
  %395 = add nuw nsw i32 %382, %394, !dbg !61
  %396 = zext i32 %395 to i64, !dbg !61
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i64 %396, !dbg !61
  %398 = insertelement <2 x float> undef, float %368, i64 0, !dbg !61
  %399 = insertelement <2 x float> %398, float %369, i64 1, !dbg !61
  store <2 x float> %399, ptr addrspace(3) %397, align 8, !dbg !61
  %400 = add nuw nsw i32 %388, %394, !dbg !61
  %401 = zext i32 %400 to i64, !dbg !61
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i64 %401, !dbg !61
  %403 = insertelement <2 x float> undef, float %370, i64 0, !dbg !61
  %404 = insertelement <2 x float> %403, float %371, i64 1, !dbg !61
  store <2 x float> %404, ptr addrspace(3) %402, align 8, !dbg !61
  %405 = or i32 %380, 16, !dbg !61
  %406 = add nuw nsw i32 %382, %405, !dbg !61
  %407 = zext i32 %406 to i64, !dbg !61
  %408 = getelementptr float, ptr addrspace(3) @global_smem, i64 %407, !dbg !61
  %409 = insertelement <2 x float> undef, float %372, i64 0, !dbg !61
  %410 = insertelement <2 x float> %409, float %373, i64 1, !dbg !61
  store <2 x float> %410, ptr addrspace(3) %408, align 8, !dbg !61
  %411 = add nuw nsw i32 %388, %405, !dbg !61
  %412 = zext i32 %411 to i64, !dbg !61
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i64 %412, !dbg !61
  %414 = insertelement <2 x float> undef, float %374, i64 0, !dbg !61
  %415 = insertelement <2 x float> %414, float %375, i64 1, !dbg !61
  store <2 x float> %415, ptr addrspace(3) %413, align 8, !dbg !61
  %416 = or i32 %380, 24, !dbg !61
  %417 = add nuw nsw i32 %382, %416, !dbg !61
  %418 = zext i32 %417 to i64, !dbg !61
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i64 %418, !dbg !61
  %420 = insertelement <2 x float> undef, float %376, i64 0, !dbg !61
  %421 = insertelement <2 x float> %420, float %377, i64 1, !dbg !61
  store <2 x float> %421, ptr addrspace(3) %419, align 8, !dbg !61
  %422 = add nuw nsw i32 %388, %416, !dbg !61
  %423 = zext i32 %422 to i64, !dbg !61
  %424 = getelementptr float, ptr addrspace(3) @global_smem, i64 %423, !dbg !61
  %425 = insertelement <2 x float> undef, float %378, i64 0, !dbg !61
  %426 = insertelement <2 x float> %425, float %379, i64 1, !dbg !61
  store <2 x float> %426, ptr addrspace(3) %424, align 8, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %427 = mul nuw nsw i32 %330, 36, !dbg !61
  %428 = add nuw nsw i32 %427, %327, !dbg !61
  %429 = zext i32 %428 to i64, !dbg !61
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i64 %429, !dbg !61
  %431 = load <4 x i32>, ptr addrspace(3) %430, align 16, !dbg !61
  %432 = mul nuw nsw i32 %335, 36, !dbg !61
  %433 = add nuw nsw i32 %432, %327, !dbg !61
  %434 = zext i32 %433 to i64, !dbg !61
  %435 = getelementptr float, ptr addrspace(3) @global_smem, i64 %434, !dbg !61
  %436 = load <4 x i32>, ptr addrspace(3) %435, align 16, !dbg !61
  %437 = mul nuw nsw i32 %333, 36, !dbg !61
  %438 = add nuw nsw i32 %437, %327, !dbg !61
  %439 = zext i32 %438 to i64, !dbg !61
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i64 %439, !dbg !61
  %441 = load <4 x i32>, ptr addrspace(3) %440, align 16, !dbg !61
  %442 = mul nuw nsw i32 %331, 36, !dbg !61
  %443 = add nuw nsw i32 %442, %327, !dbg !61
  %444 = zext i32 %443 to i64, !dbg !61
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i64 %444, !dbg !61
  %446 = load <4 x i32>, ptr addrspace(3) %445, align 16, !dbg !61
  %.extract = extractelement <4 x i32> %431, i64 0, !dbg !61
  %.extract102 = extractelement <4 x i32> %431, i64 1, !dbg !61
  %.extract104 = extractelement <4 x i32> %431, i64 2, !dbg !61
  %.extract106 = extractelement <4 x i32> %431, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract102, i32 %.extract104, i32 %.extract106, ptr addrspace(1) %351, i1 %360) #3, !dbg !61
  %.extract108 = extractelement <4 x i32> %436, i64 0, !dbg !61
  %.extract110 = extractelement <4 x i32> %436, i64 1, !dbg !61
  %.extract112 = extractelement <4 x i32> %436, i64 2, !dbg !61
  %.extract114 = extractelement <4 x i32> %436, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract108, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %352, i1 %361) #3, !dbg !61
  %.extract116 = extractelement <4 x i32> %441, i64 0, !dbg !61
  %.extract118 = extractelement <4 x i32> %441, i64 1, !dbg !61
  %.extract120 = extractelement <4 x i32> %441, i64 2, !dbg !61
  %.extract122 = extractelement <4 x i32> %441, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %353, i1 %362) #3, !dbg !61
  %.extract124 = extractelement <4 x i32> %446, i64 0, !dbg !61
  %.extract126 = extractelement <4 x i32> %446, i64 1, !dbg !61
  %.extract128 = extractelement <4 x i32> %446, i64 2, !dbg !61
  %.extract130 = extractelement <4 x i32> %446, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract124, i32 %.extract126, i32 %.extract128, i32 %.extract130, ptr addrspace(1) %354, i1 %363) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cache.py", directory: "/home/master/triton/baichuan/cache")
!3 = !{ptr @matmul_cache_kernel_0d1d2d3d4d5d6d7c8d9c10d11c, !"kernel", i32 1}
!4 = !{ptr @matmul_cache_kernel_0d1d2d3d4d5d6d7c8d9c10d11c, !"maxntidx", i32 64}
!5 = distinct !DISubprogram(name: "matmul_cache_kernel_0d1d2d3d4d5d6d7c8d9c10d11c", linkageName: "matmul_cache_kernel_0d1d2d3d4d5d6d7c8d9c10d11c", scope: !2, file: !2, line: 8, type: !6, scopeLine: 8, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 28, column: 51, scope: !5)
!9 = !DILocation(line: 18, column: 24, scope: !5)
!10 = !DILocation(line: 21, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !5, file: !12, discriminator: 0)
!12 = !DIFile(filename: "standard.py", directory: "/home/master/anaconda3/lib/python3.11/site-packages/triton/language")
!13 = !DILocation(line: 19, column: 27, scope: !11)
!14 = !DILocation(line: 21, column: 28, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 21, scope: !11, inlinedAt: !16)
!16 = !DILocation(line: 20, column: 27, scope: !11)
!17 = !DILocation(line: 21, column: 28, scope: !11, inlinedAt: !16)
!18 = !DILocation(line: 21, column: 38, scope: !5)
!19 = !DILocation(line: 22, column: 22, scope: !5)
!20 = !DILocation(line: 23, column: 29, scope: !5)
!21 = !DILocation(line: 24, column: 35, scope: !5)
!22 = !DILocation(line: 1385, column: 27, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !5, file: !24, discriminator: 0)
!24 = !DIFile(filename: "core.py", directory: "/home/master/anaconda3/lib/python3.11/site-packages/triton/language")
!25 = !DILocation(line: 24, column: 48, scope: !23)
!26 = !DILocation(line: 25, column: 33, scope: !5)
!27 = !DILocation(line: 25, column: 27, scope: !5)
!28 = !DILocation(line: 26, column: 40, scope: !5)
!29 = !DILocation(line: 28, column: 23, scope: !5)
!30 = !DILocation(line: 28, column: 38, scope: !5)
!31 = !DILocation(line: 28, column: 68, scope: !5)
!32 = !DILocation(line: 29, column: 23, scope: !5)
!33 = !DILocation(line: 29, column: 38, scope: !5)
!34 = !DILocation(line: 29, column: 68, scope: !5)
!35 = !DILocation(line: 31, column: 41, scope: !5)
!36 = !DILocation(line: 31, column: 53, scope: !5)
!37 = !DILocation(line: 31, column: 22, scope: !5)
!38 = !DILocation(line: 32, column: 40, scope: !5)
!39 = !DILocation(line: 32, column: 52, scope: !5)
!40 = !DILocation(line: 32, column: 22, scope: !5)
!41 = !DILocation(line: 21, scope: !11, inlinedAt: !42)
!42 = !DILocation(line: 35, column: 33, scope: !11)
!43 = !DILocation(line: 21, column: 28, scope: !11, inlinedAt: !42)
!44 = !DILocation(line: 40, column: 33, scope: !5)
!45 = !DILocation(line: 35, column: 22, scope: !5)
!46 = !DILocation(line: 36, column: 51, scope: !5)
!47 = !DILocation(line: 36, column: 20, scope: !5)
!48 = !DILocation(line: 37, column: 51, scope: !5)
!49 = !DILocation(line: 37, column: 20, scope: !5)
!50 = !DILocation(line: 39, column: 18, scope: !5)
!51 = !DILocation(line: 40, column: 18, scope: !5)
!52 = !DILocation(line: 36, column: 55, scope: !5)
!53 = !DILocation(line: 38, scope: !5)
!54 = !DILocation(line: 36, column: 59, scope: !5)
!55 = !DILocation(line: 47, column: 33, scope: !5)
!56 = !DILocation(line: 47, column: 21, scope: !5)
!57 = !DILocation(line: 47, column: 52, scope: !5)
!58 = !DILocation(line: 48, column: 33, scope: !5)
!59 = !DILocation(line: 48, column: 58, scope: !5)
!60 = !DILocation(line: 48, column: 39, scope: !5)
!61 = !DILocation(line: 49, column: 21, scope: !5)
!62 = !DILocation(line: 49, column: 4, scope: !5)
