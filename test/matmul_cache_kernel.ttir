module {
  tt.func public @matmul_cache_kernel_0d1d2d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf16>
    %c16_i32 = arith.constant 16 : i32
    %c64_i32 = arith.constant 64 : i32
    %cst_0 = arith.constant dense<16384> : tensor<32x32xi32>
    %cst_1 = arith.constant dense<32> : tensor<32x32xi32>
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_2 = arith.constant dense<512> : tensor<1x32xi32>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %cst_4 = arith.constant dense<512> : tensor<32x1xi32>
    %cst_5 = arith.constant dense<512> : tensor<32xi32>
    %c32_i32 = arith.constant 32 : i32
    %c4_i32 = arith.constant 4 : i32
    %c512_i32 = arith.constant 512 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.divsi %0, %c64_i32 : i32
    %2 = arith.muli %1, %c4_i32 : i32
    %3 = arith.subi %c16_i32, %2 : i32
    %4 = arith.cmpi slt, %3, %c4_i32 : i32
    %5 = arith.select %4, %3, %c4_i32 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %8 = arith.remsi %0, %c64_i32 : i32
    %9 = arith.divsi %8, %5 : i32
    %10 = arith.muli %7, %c32_i32 : i32
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %12 = tt.splat %10 : (i32) -> tensor<32xi32>
    %13 = arith.addi %12, %11 : tensor<32xi32>
    %14 = arith.remsi %13, %cst_5 : tensor<32xi32>
    %15 = arith.muli %9, %c32_i32 : i32
    %16 = tt.splat %15 : (i32) -> tensor<32xi32>
    %17 = arith.addi %16, %11 : tensor<32xi32>
    %18 = arith.remsi %17, %cst_5 : tensor<32xi32>
    %19 = tt.expand_dims %14 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %20 = arith.muli %19, %cst_4 : tensor<32x1xi32>
    %21 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %22 = tt.broadcast %20 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %23 = tt.broadcast %21 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %24 = arith.addi %22, %23 : tensor<32x32xi32>
    %25 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>>
    %26 = tt.addptr %25, %24 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
    %27 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %28 = arith.muli %27, %cst_4 : tensor<32x1xi32>
    %29 = tt.expand_dims %18 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %30 = tt.broadcast %28 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %31 = tt.broadcast %29 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %32 = arith.addi %30, %31 : tensor<32x32xi32>
    %33 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>>
    %34 = tt.addptr %33, %32 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
    %35:3 = scf.for %arg3 = %c0_i32 to %c16_i32 step %c1_i32 iter_args(%arg4 = %cst_3, %arg5 = %26, %arg6 = %34) -> (tensor<32x32xf32>, tensor<32x32x!tt.ptr<f16>>, tensor<32x32x!tt.ptr<f16>>)  : i32 {
      %49 = arith.muli %arg3, %c32_i32 : i32
      %50 = arith.subi %c512_i32, %49 : i32
      %51 = tt.splat %50 : (i32) -> tensor<1x32xi32>
      %52 = arith.cmpi slt, %21, %51 : tensor<1x32xi32>
      %53 = tt.broadcast %52 : (tensor<1x32xi1>) -> tensor<32x32xi1>
      %54 = tt.load %arg5, %53, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf16>
      %55 = tt.splat %50 : (i32) -> tensor<32x1xi32>
      %56 = arith.cmpi slt, %27, %55 : tensor<32x1xi32>
      %57 = tt.broadcast %56 : (tensor<32x1xi1>) -> tensor<32x32xi1>
      %58 = tt.load %arg6, %57, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf16>
      %59 = tt.dot %54, %58, %arg4 {allowTF32 = true} : tensor<32x32xf16> * tensor<32x32xf16> -> tensor<32x32xf32>
      %60 = tt.addptr %arg5, %cst_1 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
      %61 = tt.addptr %arg6, %cst_0 : tensor<32x32x!tt.ptr<f16>>, tensor<32x32xi32>
      scf.yield %59, %60, %61 : tensor<32x32xf32>, tensor<32x32x!tt.ptr<f16>>, tensor<32x32x!tt.ptr<f16>>
    }
    %36 = tt.expand_dims %13 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %37 = arith.muli %36, %cst_4 : tensor<32x1xi32>
    %38 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %39 = tt.addptr %38, %37 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %40 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %41 = tt.broadcast %39 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x32x!tt.ptr<f32>>
    %42 = tt.broadcast %40 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %43 = tt.addptr %41, %42 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32>
    %44 = arith.cmpi slt, %36, %cst_4 : tensor<32x1xi32>
    %45 = arith.cmpi slt, %40, %cst_2 : tensor<1x32xi32>
    %46 = tt.broadcast %44 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %47 = tt.broadcast %45 : (tensor<1x32xi1>) -> tensor<32x32xi1>
    %48 = arith.andi %46, %47 : tensor<32x32xi1>
    tt.store %43, %35#0, %48 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32>
    tt.return
  }
}
