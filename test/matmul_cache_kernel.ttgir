#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 2 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_cache_kernel_0d1d2d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c3_i32 = arith.constant 3 : i32
    %cst = arith.constant dense<448> : tensor<32x1xi32, #blocked>
    %cst_0 = arith.constant dense<448> : tensor<1x32xi32, #blocked>
    %c64_i32 = arith.constant 64 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst_1 = arith.constant dense<480> : tensor<32x1xi32, #blocked>
    %cst_2 = arith.constant dense<480> : tensor<1x32xi32, #blocked>
    %c32_i32 = arith.constant 32 : i32
    %cst_3 = arith.constant dense<512> : tensor<32x1xi32, #blocked>
    %cst_4 = arith.constant dense<512> : tensor<1x32xi32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>
    %cst_6 = arith.constant dense<512> : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %cst_7 = arith.constant dense<512> : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %cst_8 = arith.constant dense<16384> : tensor<32x32xi32, #blocked>
    %cst_9 = arith.constant dense<32> : tensor<32x32xi32, #blocked>
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<32x32xf16, #blocked>
    %cst_11 = arith.constant dense<512> : tensor<32x1xi32, #blocked1>
    %cst_12 = arith.constant dense<512> : tensor<1x32xi32, #blocked1>
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %c512_i32 = arith.constant 512 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.divsi %0, %c64_i32 : i32
    %2 = arith.muli %1, %c4_i32 : i32
    %3 = arith.subi %c16_i32, %2 : i32
    %4 = "triton_gpu.cmpi"(%3, %c4_i32) <{predicate = 2 : i64}> : (i32, i32) -> i1
    %5 = arith.select %4, %3, %c4_i32 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %8 = arith.remsi %0, %c64_i32 : i32
    %9 = arith.divsi %8, %5 : i32
    %10 = arith.muli %7, %c32_i32 : i32
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %15 = tt.splat %10 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %16 = tt.splat %10 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %17 = arith.addi %15, %11 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %18 = arith.addi %16, %14 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %19 = arith.remsi %17, %cst_6 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %20 = arith.muli %9, %c32_i32 : i32
    %21 = tt.splat %20 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %22 = tt.splat %20 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %23 = arith.addi %21, %12 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %24 = arith.addi %22, %13 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %25 = arith.remsi %23, %cst_7 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %26 = tt.expand_dims %19 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %27 = arith.muli %26, %cst_3 : tensor<32x1xi32, #blocked>
    %28 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %29 = tt.broadcast %27 : (tensor<32x1xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %30 = tt.broadcast %28 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %31 = arith.addi %29, %30 : tensor<32x32xi32, #blocked>
    %32 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>, #blocked>
    %33 = tt.addptr %32, %31 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %34 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %35 = arith.muli %34, %cst_3 : tensor<32x1xi32, #blocked>
    %36 = tt.expand_dims %25 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %37 = tt.broadcast %35 : (tensor<32x1xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %38 = tt.broadcast %36 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>
    %39 = arith.addi %37, %38 : tensor<32x32xi32, #blocked>
    %40 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x32x!tt.ptr<f16>, #blocked>
    %41 = tt.addptr %40, %39 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %42 = "triton_gpu.cmpi"(%28, %cst_4) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
    %43 = tt.broadcast %42 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %44 = triton_gpu.alloc_tensor : tensor<4x32x32xf16, #shared>
    %45 = triton_gpu.insert_slice_async %33, %44, %c0_i32, %43, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %46 = "triton_gpu.cmpi"(%34, %cst_3) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
    %47 = tt.broadcast %46 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %48 = triton_gpu.alloc_tensor : tensor<4x32x32xf16, #shared>
    %49 = triton_gpu.insert_slice_async %41, %48, %c0_i32, %47, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %50 = tt.addptr %33, %cst_9 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %51 = tt.addptr %41, %cst_8 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %52 = "triton_gpu.cmpi"(%28, %cst_2) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
    %53 = tt.broadcast %52 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %54 = triton_gpu.insert_slice_async %50, %45, %c1_i32, %53, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %55 = "triton_gpu.cmpi"(%34, %cst_1) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
    %56 = tt.broadcast %55 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %57 = triton_gpu.insert_slice_async %51, %49, %c1_i32, %56, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %58 = tt.addptr %50, %cst_9 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %59 = tt.addptr %51, %cst_8 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
    %60 = "triton_gpu.cmpi"(%28, %cst_0) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
    %61 = tt.broadcast %60 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %62 = triton_gpu.insert_slice_async %58, %54, %c2_i32, %61, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    %63 = "triton_gpu.cmpi"(%34, %cst) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
    %64 = tt.broadcast %63 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
    %65 = triton_gpu.insert_slice_async %59, %57, %c2_i32, %64, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
    triton_gpu.async_commit_group
    triton_gpu.async_wait {num = 4 : i32}
    %66 = triton_gpu.extract_slice %62[0, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
    %67 = triton_gpu.extract_slice %65[0, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
    %68 = triton_gpu.extract_slice %66[0, 0] [32, 16] [1, 1] : tensor<32x32xf16, #shared> to tensor<32x16xf16, #shared>
    %69 = triton_gpu.convert_layout %68 : (tensor<32x16xf16, #shared>) -> tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>
    %70 = triton_gpu.extract_slice %67[0, 0] [16, 32] [1, 1] : tensor<32x32xf16, #shared> to tensor<16x32xf16, #shared>
    %71 = triton_gpu.convert_layout %70 : (tensor<16x32xf16, #shared>) -> tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
    %72:14 = scf.for %arg3 = %c0_i32 to %c16_i32 step %c1_i32 iter_args(%arg4 = %cst_5, %arg5 = %33, %arg6 = %41, %arg7 = %62, %arg8 = %65, %arg9 = %66, %arg10 = %67, %arg11 = %58, %arg12 = %59, %arg13 = %c2_i32, %arg14 = %c3_i32, %arg15 = %c1_i32, %arg16 = %69, %arg17 = %71) -> (tensor<32x32xf32, #mma>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<4x32x32xf16, #shared>, tensor<4x32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, i32, i32, i32, tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>)  : i32 {
      %87 = triton_gpu.extract_slice %arg9[0, 16] [32, 16] [1, 1] : tensor<32x32xf16, #shared> to tensor<32x16xf16, #shared>
      %88 = triton_gpu.convert_layout %87 : (tensor<32x16xf16, #shared>) -> tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>
      %89 = triton_gpu.extract_slice %arg10[16, 0] [16, 32] [1, 1] : tensor<32x32xf16, #shared> to tensor<16x32xf16, #shared>
      %90 = triton_gpu.convert_layout %89 : (tensor<16x32xf16, #shared>) -> tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
      %91 = tt.dot %arg16, %arg17, %arg4 {allowTF32 = true} : tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<32x32xf32, #mma>
      %92 = tt.dot %88, %90, %91 {allowTF32 = true} : tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<32x32xf32, #mma>
      %93 = tt.addptr %arg5, %cst_9 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %94 = tt.addptr %arg6, %cst_8 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %95 = arith.addi %arg13, %c1_i32 : i32
      %96 = arith.cmpi slt, %95, %c16_i32 : i32
      %97 = arith.remsi %arg14, %c4_i32 : i32
      %98 = arith.remsi %arg15, %c4_i32 : i32
      %99 = arith.muli %95, %c32_i32 : i32
      %100 = arith.subi %c512_i32, %99 : i32
      %101 = tt.splat %100 : (i32) -> tensor<1x32xi32, #blocked>
      %102 = "triton_gpu.cmpi"(%28, %101) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
      %103 = tt.broadcast %102 : (tensor<1x32xi1, #blocked>) -> tensor<32x32xi1, #blocked>
      %104 = tt.splat %100 : (i32) -> tensor<32x1xi32, #blocked>
      %105 = "triton_gpu.cmpi"(%34, %104) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
      %106 = tt.broadcast %105 : (tensor<32x1xi1, #blocked>) -> tensor<32x32xi1, #blocked>
      %107 = tt.addptr %arg11, %cst_9 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %108 = tt.addptr %arg12, %cst_8 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>
      %109 = tt.splat %96 : (i1) -> tensor<32x32xi1, #blocked>
      %110 = arith.andi %103, %109 : tensor<32x32xi1, #blocked>
      %111 = triton_gpu.insert_slice_async %107, %arg7, %97, %110, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
      triton_gpu.async_commit_group
      %112 = arith.andi %106, %109 : tensor<32x32xi1, #blocked>
      %113 = triton_gpu.insert_slice_async %108, %arg8, %97, %112, %cst_10 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32x!tt.ptr<f16>, #blocked> -> tensor<4x32x32xf16, #shared>
      triton_gpu.async_commit_group
      triton_gpu.async_wait {num = 4 : i32}
      %114 = triton_gpu.extract_slice %111[%98, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
      %115 = triton_gpu.extract_slice %113[%98, 0, 0] [1, 32, 32] [1, 1, 1] : tensor<4x32x32xf16, #shared> to tensor<32x32xf16, #shared>
      %116 = arith.addi %arg14, %c1_i32 : i32
      %117 = arith.addi %arg15, %c1_i32 : i32
      %118 = triton_gpu.extract_slice %114[0, 0] [32, 16] [1, 1] : tensor<32x32xf16, #shared> to tensor<32x16xf16, #shared>
      %119 = triton_gpu.convert_layout %118 : (tensor<32x16xf16, #shared>) -> tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>
      %120 = triton_gpu.extract_slice %115[0, 0] [16, 32] [1, 1] : tensor<32x32xf16, #shared> to tensor<16x32xf16, #shared>
      %121 = triton_gpu.convert_layout %120 : (tensor<16x32xf16, #shared>) -> tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
      scf.yield %92, %93, %94, %111, %113, %114, %115, %107, %108, %95, %116, %117, %119, %121 : tensor<32x32xf32, #mma>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<4x32x32xf16, #shared>, tensor<4x32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32xf16, #shared>, tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, i32, i32, i32, tensor<32x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>
    }
    triton_gpu.async_wait {num = 0 : i32}
    %73 = tt.expand_dims %18 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %74 = arith.muli %73, %cst_11 : tensor<32x1xi32, #blocked1>
    %75 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked1>
    %76 = tt.addptr %75, %74 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1>
    %77 = tt.expand_dims %24 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %78 = tt.broadcast %76 : (tensor<32x1x!tt.ptr<f32>, #blocked1>) -> tensor<32x32x!tt.ptr<f32>, #blocked1>
    %79 = tt.broadcast %77 : (tensor<1x32xi32, #blocked1>) -> tensor<32x32xi32, #blocked1>
    %80 = tt.addptr %78, %79 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1>
    %81 = "triton_gpu.cmpi"(%73, %cst_11) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked1>, tensor<32x1xi32, #blocked1>) -> tensor<32x1xi1, #blocked1>
    %82 = "triton_gpu.cmpi"(%77, %cst_12) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked1>, tensor<1x32xi32, #blocked1>) -> tensor<1x32xi1, #blocked1>
    %83 = tt.broadcast %81 : (tensor<32x1xi1, #blocked1>) -> tensor<32x32xi1, #blocked1>
    %84 = tt.broadcast %82 : (tensor<1x32xi1, #blocked1>) -> tensor<32x32xi1, #blocked1>
    %85 = arith.andi %83, %84 : tensor<32x32xi1, #blocked1>
    %86 = triton_gpu.convert_layout %72#0 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked1>
    tt.store %80, %86, %85 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked1>
    tt.return
  }
}
