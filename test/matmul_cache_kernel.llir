; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @matmul_cache_kernel_0d1d2d(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = and i32 %4, 31, !dbg !8
  %6 = lshr i32 %4, 5, !dbg !8
  %7 = and i32 %6, 1, !dbg !8
  %8 = lshr i32 %5, 2, !dbg !8
  %9 = shl nuw nsw i32 %7, 3, !dbg !8
  %10 = or i32 %9, %8, !dbg !8
  %11 = or i32 %10, 16, !dbg !8
  %12 = and i32 %4, 3, !dbg !8
  %13 = shl nuw nsw i32 %12, 3, !dbg !8
  %14 = and i32 %4, 7, !dbg !8
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %16 = sdiv i32 %15, 64, !dbg !10
  %17 = shl nsw i32 %16, 2, !dbg !11
  %18 = sub nsw i32 16, %17, !dbg !12
  %19 = tail call i32 @llvm.smin.i32(i32 %18, i32 4), !dbg !13
  %20 = srem i32 %15, %19, !dbg !17
  %21 = add nsw i32 %20, %17, !dbg !18
  %22 = mul i32 %16, 64
  %.decomposed = sub i32 %15, %22
  %23 = sdiv i32 %.decomposed, %19, !dbg !19
  %24 = shl i32 %21, 5, !dbg !20
  %25 = or i32 %24, %10, !dbg !21
  %26 = or i32 %24, %11, !dbg !21
  %27 = srem i32 %25, 512, !dbg !22
  %28 = srem i32 %26, 512, !dbg !22
  %29 = shl nsw i32 %23, 5, !dbg !23
  %30 = or i32 %29, %13, !dbg !24
  %31 = srem i32 %30, 512, !dbg !25
  %32 = shl nsw i32 %27, 9, !dbg !26
  %33 = shl nsw i32 %28, 9, !dbg !26
  %34 = or i32 %32, %13, !dbg !27
  %35 = or i32 %33, %13, !dbg !27
  %36 = sext i32 %34 to i64, !dbg !28
  %37 = getelementptr half, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = sext i32 %35 to i64, !dbg !28
  %39 = getelementptr half, ptr addrspace(1) %0, i64 %38, !dbg !28
  %40 = shl nuw nsw i32 %10, 9, !dbg !29
  %41 = shl nuw nsw i32 %11, 9, !dbg !29
  %42 = add nsw i32 %31, %40, !dbg !30
  %43 = add nsw i32 %31, %41, !dbg !30
  %44 = sext i32 %42 to i64, !dbg !31
  %45 = getelementptr half, ptr addrspace(1) %1, i64 %44, !dbg !31
  %46 = zext i32 %43 to i64, !dbg !31
  %47 = getelementptr half, ptr addrspace(1) %1, i64 %46, !dbg !31
  %48 = shl nuw nsw i32 %10, 5, !dbg !32
  %49 = shl i32 %4, 3, !dbg !32
  %50 = xor i32 %49, %4, !dbg !32
  %51 = and i32 %50, 24, !dbg !32
  %52 = or i32 %48, %51, !dbg !32
  %53 = zext i32 %52 to i64, !dbg !32
  %54 = getelementptr half, ptr addrspace(3) @global_smem, i64 %53, !dbg !32
  %55 = getelementptr half, ptr addrspace(3) %54, i64 512, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %54, ptr addrspace(1) %37, i32 16) #3, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %55, ptr addrspace(1) %39, i32 16) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %56 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %53, !dbg !33
  %57 = getelementptr half, ptr addrspace(3) %56, i64 512, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %45, i32 16) #3, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %57, ptr addrspace(1) %47, i32 16) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %58 = getelementptr half, ptr addrspace(1) %37, i64 32, !dbg !34
  %59 = getelementptr half, ptr addrspace(1) %39, i64 32, !dbg !34
  %60 = getelementptr half, ptr addrspace(1) %45, i64 16384, !dbg !35
  %61 = getelementptr half, ptr addrspace(1) %47, i64 16384, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %62 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %53, !dbg !32
  %63 = getelementptr half, ptr addrspace(3) %62, i64 512, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %58, i32 16) #3, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %63, ptr addrspace(1) %59, i32 16) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %64 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 10240), i64 %53, !dbg !33
  %65 = getelementptr half, ptr addrspace(3) %64, i64 512, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %60, i32 16) #3, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %65, ptr addrspace(1) %61, i32 16) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %66 = getelementptr half, ptr addrspace(1) %37, i64 64, !dbg !34
  %67 = getelementptr half, ptr addrspace(1) %39, i64 64, !dbg !34
  %68 = getelementptr half, ptr addrspace(1) %45, i64 32768, !dbg !35
  %69 = getelementptr half, ptr addrspace(1) %47, i64 32768, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %70 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 4096), i64 %53, !dbg !32
  %71 = getelementptr half, ptr addrspace(3) %70, i64 512, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %66, i32 16) #3, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %71, ptr addrspace(1) %67, i32 16) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %72 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 12288), i64 %53, !dbg !33
  %73 = getelementptr half, ptr addrspace(3) %72, i64 512, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %68, i32 16) #3, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %73, ptr addrspace(1) %69, i32 16) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %74 = lshr i32 %5, 4, !dbg !32
  %75 = lshr i32 %14, 1, !dbg !32
  %76 = shl nuw nsw i32 %7, 4, !dbg !32
  %77 = and i32 %4, 15, !dbg !32
  %78 = or i32 %77, %76, !dbg !32
  %79 = xor i32 %74, %75, !dbg !32
  %80 = shl nuw nsw i32 %78, 5, !dbg !32
  %81 = shl nuw nsw i32 %79, 3, !dbg !32
  %82 = or i32 %80, %81, !dbg !32
  %83 = zext i32 %82 to i64, !dbg !32
  %84 = getelementptr half, ptr addrspace(3) @global_smem, i64 %83, !dbg !32
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %84) #3, !dbg !32
  %86 = shl nuw nsw i32 %77, 5, !dbg !33
  %87 = or i32 %81, %86, !dbg !33
  %88 = zext i32 %87 to i64, !dbg !33
  %89 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %88, !dbg !33
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %89) #3, !dbg !33
  %91 = or i32 %74, 2, !dbg !33
  %92 = xor i32 %91, %75, !dbg !33
  %93 = shl nuw nsw i32 %92, 3, !dbg !33
  %94 = or i32 %93, %86, !dbg !33
  %95 = zext i32 %94 to i64, !dbg !33
  %96 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %95, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %96) #3, !dbg !33
  br label %98, !dbg !36

98:                                               ; preds = %3, %98
  %.pn96138 = phi { i32, i32, i32, i32 } [ %97, %3 ], [ %277, %98 ]
  %.pn92137 = phi { i32, i32, i32, i32 } [ %90, %3 ], [ %275, %98 ]
  %.pn72136 = phi { i32, i32, i32, i32 } [ %85, %3 ], [ %273, %98 ]
  %99 = phi i32 [ 1, %3 ], [ %271, %98 ]
  %100 = phi i32 [ 3, %3 ], [ %270, %98 ]
  %101 = phi i32 [ 2, %3 ], [ %235, %98 ]
  %.pn47135 = phi ptr addrspace(1) [ %69, %3 ], [ %245, %98 ]
  %.pn63134 = phi ptr addrspace(1) [ %68, %3 ], [ %244, %98 ]
  %.pn15133 = phi ptr addrspace(1) [ %67, %3 ], [ %243, %98 ]
  %.pn31132 = phi ptr addrspace(1) [ %66, %3 ], [ %242, %98 ]
  %102 = phi { ptr addrspace(3), i32, i32, i32, i32 } [ { ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 32, i32 1, i32 0, i32 0 }, %3 ], [ %269, %98 ]
  %103 = phi { ptr addrspace(3), i32, i32, i32, i32 } [ { ptr addrspace(3) @global_smem, i32 32, i32 1, i32 0, i32 0 }, %3 ], [ %263, %98 ]
  %104 = phi { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } [ zeroinitializer, %3 ], [ %234, %98 ]
  %105 = phi i32 [ 0, %3 ], [ %278, %98 ]
  %.pn91 = extractvalue { i32, i32, i32, i32 } %.pn92137, 0, !dbg !33
  %.pn89 = extractvalue { i32, i32, i32, i32 } %.pn92137, 1, !dbg !33
  %.pn87 = extractvalue { i32, i32, i32, i32 } %.pn92137, 2, !dbg !33
  %.pn85 = extractvalue { i32, i32, i32, i32 } %.pn92137, 3, !dbg !33
  %.pn83 = extractvalue { i32, i32, i32, i32 } %.pn96138, 0, !dbg !33
  %.pn81 = extractvalue { i32, i32, i32, i32 } %.pn96138, 1, !dbg !33
  %.pn79 = extractvalue { i32, i32, i32, i32 } %.pn96138, 2, !dbg !33
  %.pn77 = extractvalue { i32, i32, i32, i32 } %.pn96138, 3, !dbg !33
  %.pn71 = extractvalue { i32, i32, i32, i32 } %.pn72136, 0, !dbg !32
  %.pn69 = extractvalue { i32, i32, i32, i32 } %.pn72136, 2, !dbg !32
  %.pn67 = extractvalue { i32, i32, i32, i32 } %.pn72136, 1, !dbg !32
  %.pn65 = extractvalue { i32, i32, i32, i32 } %.pn72136, 3, !dbg !32
  %106 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %103, 0, !dbg !32
  %107 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %103, 1, !dbg !32
  %108 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %103, 2, !dbg !32
  %109 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %103, 4, !dbg !32
  %110 = add i32 %109, 16, !dbg !32
  %111 = shl i32 %108, 4, !dbg !32
  %112 = sext i32 %111 to i64, !dbg !32
  %113 = getelementptr half, ptr addrspace(3) %106, i64 %112, !dbg !32
  %114 = lshr i32 %110, 3, !dbg !32
  %115 = add nuw nsw i32 %114, %74, !dbg !32
  %116 = xor i32 %115, %75, !dbg !32
  %117 = mul i32 %107, %78, !dbg !32
  %118 = shl i32 %116, 3, !dbg !32
  %119 = add i32 %118, %117, !dbg !32
  %120 = sub i32 -16, %109, !dbg !32
  %121 = sext i32 %120 to i64, !dbg !32
  %122 = getelementptr half, ptr addrspace(3) %113, i64 %121, !dbg !32
  %123 = sext i32 %119 to i64, !dbg !32
  %124 = getelementptr half, ptr addrspace(3) %122, i64 %123, !dbg !32
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %124) #3, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !32
  %130 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %102, 0, !dbg !33
  %131 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %102, 1, !dbg !33
  %132 = extractvalue { ptr addrspace(3), i32, i32, i32, i32 } %102, 4, !dbg !33
  %133 = shl i32 %131, 4, !dbg !33
  %134 = sext i32 %133 to i64, !dbg !33
  %135 = getelementptr half, ptr addrspace(3) %130, i64 %134, !dbg !33
  %136 = lshr i32 %132, 3, !dbg !33
  %137 = add nuw nsw i32 %136, %74, !dbg !33
  %138 = xor i32 %137, %75, !dbg !33
  %139 = mul i32 %131, %77, !dbg !33
  %140 = shl i32 %138, 3, !dbg !33
  %141 = add i32 %140, %139, !dbg !33
  %142 = sub i32 0, %132, !dbg !33
  %143 = sext i32 %142 to i64, !dbg !33
  %144 = getelementptr half, ptr addrspace(3) %135, i64 %143, !dbg !33
  %145 = sext i32 %141 to i64, !dbg !33
  %146 = getelementptr half, ptr addrspace(3) %144, i64 %145, !dbg !33
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %146) #3, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !33
  %152 = add nuw nsw i32 %136, %91, !dbg !33
  %153 = xor i32 %152, %75, !dbg !33
  %154 = shl i32 %153, 3, !dbg !33
  %155 = add i32 %154, %139, !dbg !33
  %156 = sext i32 %155 to i64, !dbg !33
  %157 = getelementptr half, ptr addrspace(3) %144, i64 %156, !dbg !33
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %157) #3, !dbg !33
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !33
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !33
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !33
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 0, !dbg !37
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 1, !dbg !37
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 2, !dbg !37
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 3, !dbg !37
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 4, !dbg !37
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 5, !dbg !37
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 6, !dbg !37
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 7, !dbg !37
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 8, !dbg !37
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 9, !dbg !37
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 10, !dbg !37
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 11, !dbg !37
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 12, !dbg !37
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 13, !dbg !37
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 14, !dbg !37
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %104, 15, !dbg !37
  %179 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn71, i32 %.pn67, i32 %.pn69, i32 %.pn65, i32 %.pn91, i32 %.pn89, float %163, float %164, float %165, float %166) #3, !dbg !37
  %180 = extractvalue { float, float, float, float } %179, 0, !dbg !37
  %181 = extractvalue { float, float, float, float } %179, 1, !dbg !37
  %182 = extractvalue { float, float, float, float } %179, 2, !dbg !37
  %183 = extractvalue { float, float, float, float } %179, 3, !dbg !37
  %184 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn71, i32 %.pn67, i32 %.pn69, i32 %.pn65, i32 %.pn87, i32 %.pn85, float %167, float %168, float %169, float %170) #3, !dbg !37
  %185 = extractvalue { float, float, float, float } %184, 0, !dbg !37
  %186 = extractvalue { float, float, float, float } %184, 1, !dbg !37
  %187 = extractvalue { float, float, float, float } %184, 2, !dbg !37
  %188 = extractvalue { float, float, float, float } %184, 3, !dbg !37
  %189 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn71, i32 %.pn67, i32 %.pn69, i32 %.pn65, i32 %.pn83, i32 %.pn81, float %171, float %172, float %173, float %174) #3, !dbg !37
  %190 = extractvalue { float, float, float, float } %189, 0, !dbg !37
  %191 = extractvalue { float, float, float, float } %189, 1, !dbg !37
  %192 = extractvalue { float, float, float, float } %189, 2, !dbg !37
  %193 = extractvalue { float, float, float, float } %189, 3, !dbg !37
  %194 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %.pn71, i32 %.pn67, i32 %.pn69, i32 %.pn65, i32 %.pn79, i32 %.pn77, float %175, float %176, float %177, float %178) #3, !dbg !37
  %195 = extractvalue { float, float, float, float } %194, 0, !dbg !37
  %196 = extractvalue { float, float, float, float } %194, 1, !dbg !37
  %197 = extractvalue { float, float, float, float } %194, 2, !dbg !37
  %198 = extractvalue { float, float, float, float } %194, 3, !dbg !37
  %199 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %126, i32 %127, i32 %128, i32 %129, i32 %148, i32 %149, float %180, float %181, float %182, float %183) #3, !dbg !37
  %200 = extractvalue { float, float, float, float } %199, 0, !dbg !37
  %201 = extractvalue { float, float, float, float } %199, 1, !dbg !37
  %202 = extractvalue { float, float, float, float } %199, 2, !dbg !37
  %203 = extractvalue { float, float, float, float } %199, 3, !dbg !37
  %204 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %126, i32 %127, i32 %128, i32 %129, i32 %150, i32 %151, float %185, float %186, float %187, float %188) #3, !dbg !37
  %205 = extractvalue { float, float, float, float } %204, 0, !dbg !37
  %206 = extractvalue { float, float, float, float } %204, 1, !dbg !37
  %207 = extractvalue { float, float, float, float } %204, 2, !dbg !37
  %208 = extractvalue { float, float, float, float } %204, 3, !dbg !37
  %209 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %126, i32 %127, i32 %128, i32 %129, i32 %159, i32 %160, float %190, float %191, float %192, float %193) #3, !dbg !37
  %210 = extractvalue { float, float, float, float } %209, 0, !dbg !37
  %211 = extractvalue { float, float, float, float } %209, 1, !dbg !37
  %212 = extractvalue { float, float, float, float } %209, 2, !dbg !37
  %213 = extractvalue { float, float, float, float } %209, 3, !dbg !37
  %214 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };", "=f,=f,=f,=f,r,r,r,r,r,r,0,1,2,3"(i32 %126, i32 %127, i32 %128, i32 %129, i32 %161, i32 %162, float %195, float %196, float %197, float %198) #3, !dbg !37
  %215 = extractvalue { float, float, float, float } %214, 0, !dbg !37
  %216 = extractvalue { float, float, float, float } %214, 1, !dbg !37
  %217 = extractvalue { float, float, float, float } %214, 2, !dbg !37
  %218 = extractvalue { float, float, float, float } %214, 3, !dbg !37
  %219 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %200, 0, !dbg !37
  %220 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %219, float %201, 1, !dbg !37
  %221 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %220, float %202, 2, !dbg !37
  %222 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %221, float %203, 3, !dbg !37
  %223 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %222, float %205, 4, !dbg !37
  %224 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %223, float %206, 5, !dbg !37
  %225 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %224, float %207, 6, !dbg !37
  %226 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %225, float %208, 7, !dbg !37
  %227 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, float %210, 8, !dbg !37
  %228 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %227, float %211, 9, !dbg !37
  %229 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, float %212, 10, !dbg !37
  %230 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, float %213, 11, !dbg !37
  %231 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %230, float %215, 12, !dbg !37
  %232 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, float %216, 13, !dbg !37
  %233 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %232, float %217, 14, !dbg !37
  %234 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, float %218, 15, !dbg !37
  %235 = add nuw nsw i32 %101, 1, !dbg !36
  %236 = icmp ult i32 %101, 15, !dbg !36
  %237 = shl i32 %235, 5, !dbg !38
  %238 = sub nsw i32 512, %237, !dbg !39
  %239 = icmp slt i32 %13, %238, !dbg !40
  %240 = icmp slt i32 %10, %238, !dbg !41
  %241 = icmp slt i32 %11, %238, !dbg !41
  %242 = getelementptr half, ptr addrspace(1) %.pn31132, i64 32, !dbg !34
  %243 = getelementptr half, ptr addrspace(1) %.pn15133, i64 32, !dbg !34
  %244 = getelementptr half, ptr addrspace(1) %.pn63134, i64 16384, !dbg !35
  %245 = getelementptr half, ptr addrspace(1) %.pn47135, i64 16384, !dbg !35
  %246 = and i1 %236, %239, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.urem = shl i32 %100, 10, !dbg !32
  %247 = and i32 %.urem, 3072, !dbg !32
  %248 = zext i32 %247 to i64
  %gep = getelementptr half, ptr addrspace(3) %54, i64 %248, !dbg !32
  %249 = getelementptr half, ptr addrspace(3) %gep, i64 512, !dbg !32
  %250 = select i1 %246, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %242, i32 %250) #3, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %249, ptr addrspace(1) %243, i32 %250) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %251 = and i1 %236, %240, !dbg !33
  %252 = and i1 %236, %241, !dbg !33
  %gep131 = getelementptr half, ptr addrspace(3) %56, i64 %248, !dbg !33
  %253 = getelementptr half, ptr addrspace(3) %gep131, i64 512, !dbg !33
  %254 = select i1 %251, i32 16, i32 0, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep131, ptr addrspace(1) %244, i32 %254) #3, !dbg !33
  %255 = select i1 %252, i32 16, i32 0, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %253, ptr addrspace(1) %245, i32 %255) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.urem154 = shl i32 %99, 10, !dbg !32
  %256 = and i32 %.urem154, 3072, !dbg !32
  %257 = zext i32 %256 to i64
  %258 = getelementptr half, ptr addrspace(3) @global_smem, i64 %257, !dbg !32
  %259 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } undef, ptr addrspace(3) %258, 0, !dbg !32
  %260 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %259, i32 32, 1, !dbg !32
  %261 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %260, i32 1, 2, !dbg !32
  %262 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %261, i32 0, 3, !dbg !32
  %263 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %262, i32 0, 4, !dbg !32
  %264 = getelementptr half, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 8192), i64 %257, !dbg !33
  %265 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } undef, ptr addrspace(3) %264, 0, !dbg !33
  %266 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %265, i32 32, 1, !dbg !33
  %267 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %266, i32 1, 2, !dbg !33
  %268 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %267, i32 0, 3, !dbg !33
  %269 = insertvalue { ptr addrspace(3), i32, i32, i32, i32 } %268, i32 0, 4, !dbg !33
  %270 = add nuw nsw i32 %100, 1, !dbg !36
  %271 = add nuw nsw i32 %99, 1, !dbg !36
  %272 = getelementptr half, ptr addrspace(3) %258, i64 %83, !dbg !32
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %272) #3, !dbg !32
  %274 = getelementptr half, ptr addrspace(3) %264, i64 %88, !dbg !33
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %274) #3, !dbg !33
  %276 = getelementptr half, ptr addrspace(3) %264, i64 %95, !dbg !33
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %276) #3, !dbg !33
  %278 = add nuw nsw i32 %105, 1, !dbg !36
  %279 = icmp ult i32 %105, 15, !dbg !36
  br i1 %279, label %98, label %280, !dbg !36

280:                                              ; preds = %98
  %281 = lshr i32 %5, 3, !dbg !8
  %282 = shl nuw nsw i32 %14, 2, !dbg !8
  %283 = or i32 %29, %282, !dbg !24
  %284 = shl nuw nsw i32 %7, 2, !dbg !8
  %285 = or i32 %284, %281, !dbg !8
  %286 = or i32 %285, 24, !dbg !8
  %287 = or i32 %24, %286, !dbg !21
  %288 = or i32 %285, 16, !dbg !8
  %289 = or i32 %24, %288, !dbg !21
  %290 = or i32 %285, 8, !dbg !8
  %291 = or i32 %24, %290, !dbg !21
  %292 = or i32 %24, %285, !dbg !21
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %293 = shl i32 %292, 9, !dbg !42
  %294 = shl i32 %291, 9, !dbg !42
  %295 = shl i32 %289, 9, !dbg !42
  %296 = shl i32 %287, 9, !dbg !42
  %297 = sext i32 %293 to i64, !dbg !43
  %298 = getelementptr float, ptr addrspace(1) %2, i64 %297, !dbg !43
  %299 = sext i32 %294 to i64, !dbg !43
  %300 = getelementptr float, ptr addrspace(1) %2, i64 %299, !dbg !43
  %301 = sext i32 %295 to i64, !dbg !43
  %302 = getelementptr float, ptr addrspace(1) %2, i64 %301, !dbg !43
  %303 = sext i32 %296 to i64, !dbg !43
  %304 = getelementptr float, ptr addrspace(1) %2, i64 %303, !dbg !43
  %305 = sext i32 %283 to i64, !dbg !44
  %306 = getelementptr float, ptr addrspace(1) %298, i64 %305, !dbg !44
  %307 = getelementptr float, ptr addrspace(1) %300, i64 %305, !dbg !44
  %308 = getelementptr float, ptr addrspace(1) %302, i64 %305, !dbg !44
  %309 = getelementptr float, ptr addrspace(1) %304, i64 %305, !dbg !44
  %310 = icmp slt i32 %292, 512, !dbg !45
  %311 = icmp slt i32 %291, 512, !dbg !45
  %312 = icmp slt i32 %289, 512, !dbg !45
  %313 = icmp slt i32 %287, 512, !dbg !45
  %314 = icmp slt i32 %283, 512, !dbg !46
  %315 = and i1 %310, %314, !dbg !47
  %316 = and i1 %311, %314, !dbg !47
  %317 = and i1 %312, %314, !dbg !47
  %318 = and i1 %313, %314, !dbg !47
  %319 = shl nuw nsw i32 %12, 1, !dbg !48
  %320 = or i32 %76, %8, !dbg !48
  %321 = mul nuw nsw i32 %320, 36, !dbg !48
  %322 = add nuw nsw i32 %321, %319, !dbg !48
  %323 = zext i32 %322 to i64, !dbg !48
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i64 %323, !dbg !48
  %325 = insertelement <2 x float> undef, float %200, i64 0, !dbg !48
  %326 = insertelement <2 x float> %325, float %201, i64 1, !dbg !48
  store <2 x float> %326, ptr addrspace(3) %324, align 8, !dbg !48
  %327 = add nuw nsw i32 %321, 288, !dbg !48
  %328 = add nuw nsw i32 %327, %319, !dbg !48
  %329 = zext i32 %328 to i64, !dbg !48
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i64 %329, !dbg !48
  %331 = insertelement <2 x float> undef, float %202, i64 0, !dbg !48
  %332 = insertelement <2 x float> %331, float %203, i64 1, !dbg !48
  store <2 x float> %332, ptr addrspace(3) %330, align 8, !dbg !48
  %333 = or i32 %319, 8, !dbg !48
  %334 = add nuw nsw i32 %321, %333, !dbg !48
  %335 = zext i32 %334 to i64, !dbg !48
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i64 %335, !dbg !48
  %337 = insertelement <2 x float> undef, float %205, i64 0, !dbg !48
  %338 = insertelement <2 x float> %337, float %206, i64 1, !dbg !48
  store <2 x float> %338, ptr addrspace(3) %336, align 8, !dbg !48
  %339 = add nuw nsw i32 %327, %333, !dbg !48
  %340 = zext i32 %339 to i64, !dbg !48
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i64 %340, !dbg !48
  %342 = insertelement <2 x float> undef, float %207, i64 0, !dbg !48
  %343 = insertelement <2 x float> %342, float %208, i64 1, !dbg !48
  store <2 x float> %343, ptr addrspace(3) %341, align 8, !dbg !48
  %344 = or i32 %319, 16, !dbg !48
  %345 = add nuw nsw i32 %321, %344, !dbg !48
  %346 = zext i32 %345 to i64, !dbg !48
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i64 %346, !dbg !48
  %348 = insertelement <2 x float> undef, float %210, i64 0, !dbg !48
  %349 = insertelement <2 x float> %348, float %211, i64 1, !dbg !48
  store <2 x float> %349, ptr addrspace(3) %347, align 8, !dbg !48
  %350 = add nuw nsw i32 %327, %344, !dbg !48
  %351 = zext i32 %350 to i64, !dbg !48
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i64 %351, !dbg !48
  %353 = insertelement <2 x float> undef, float %212, i64 0, !dbg !48
  %354 = insertelement <2 x float> %353, float %213, i64 1, !dbg !48
  store <2 x float> %354, ptr addrspace(3) %352, align 8, !dbg !48
  %355 = or i32 %319, 24, !dbg !48
  %356 = add nuw nsw i32 %321, %355, !dbg !48
  %357 = zext i32 %356 to i64, !dbg !48
  %358 = getelementptr float, ptr addrspace(3) @global_smem, i64 %357, !dbg !48
  %359 = insertelement <2 x float> undef, float %215, i64 0, !dbg !48
  %360 = insertelement <2 x float> %359, float %216, i64 1, !dbg !48
  store <2 x float> %360, ptr addrspace(3) %358, align 8, !dbg !48
  %361 = add nuw nsw i32 %327, %355, !dbg !48
  %362 = zext i32 %361 to i64, !dbg !48
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i64 %362, !dbg !48
  %364 = insertelement <2 x float> undef, float %217, i64 0, !dbg !48
  %365 = insertelement <2 x float> %364, float %218, i64 1, !dbg !48
  store <2 x float> %365, ptr addrspace(3) %363, align 8, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %366 = mul nuw nsw i32 %285, 36, !dbg !48
  %367 = add nuw nsw i32 %366, %282, !dbg !48
  %368 = zext i32 %367 to i64, !dbg !48
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i64 %368, !dbg !48
  %370 = load <4 x i32>, ptr addrspace(3) %369, align 16, !dbg !48
  %371 = mul nuw nsw i32 %290, 36, !dbg !48
  %372 = add nuw nsw i32 %371, %282, !dbg !48
  %373 = zext i32 %372 to i64, !dbg !48
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i64 %373, !dbg !48
  %375 = load <4 x i32>, ptr addrspace(3) %374, align 16, !dbg !48
  %376 = mul nuw nsw i32 %288, 36, !dbg !48
  %377 = add nuw nsw i32 %376, %282, !dbg !48
  %378 = zext i32 %377 to i64, !dbg !48
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i64 %378, !dbg !48
  %380 = load <4 x i32>, ptr addrspace(3) %379, align 16, !dbg !48
  %381 = mul nuw nsw i32 %286, 36, !dbg !48
  %382 = add nuw nsw i32 %381, %282, !dbg !48
  %383 = zext i32 %382 to i64, !dbg !48
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i64 %383, !dbg !48
  %385 = load <4 x i32>, ptr addrspace(3) %384, align 16, !dbg !48
  %.extract = extractelement <4 x i32> %370, i64 0, !dbg !48
  %.extract101 = extractelement <4 x i32> %370, i64 1, !dbg !48
  %.extract103 = extractelement <4 x i32> %370, i64 2, !dbg !48
  %.extract105 = extractelement <4 x i32> %370, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract101, i32 %.extract103, i32 %.extract105, ptr addrspace(1) %306, i1 %315) #3, !dbg !48
  %.extract107 = extractelement <4 x i32> %375, i64 0, !dbg !48
  %.extract109 = extractelement <4 x i32> %375, i64 1, !dbg !48
  %.extract111 = extractelement <4 x i32> %375, i64 2, !dbg !48
  %.extract113 = extractelement <4 x i32> %375, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract107, i32 %.extract109, i32 %.extract111, i32 %.extract113, ptr addrspace(1) %307, i1 %316) #3, !dbg !48
  %.extract115 = extractelement <4 x i32> %380, i64 0, !dbg !48
  %.extract117 = extractelement <4 x i32> %380, i64 1, !dbg !48
  %.extract119 = extractelement <4 x i32> %380, i64 2, !dbg !48
  %.extract121 = extractelement <4 x i32> %380, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract115, i32 %.extract117, i32 %.extract119, i32 %.extract121, ptr addrspace(1) %308, i1 %317) #3, !dbg !48
  %.extract123 = extractelement <4 x i32> %385, i64 0, !dbg !48
  %.extract125 = extractelement <4 x i32> %385, i64 1, !dbg !48
  %.extract127 = extractelement <4 x i32> %385, i64 2, !dbg !48
  %.extract129 = extractelement <4 x i32> %385, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract123, i32 %.extract125, i32 %.extract127, i32 %.extract129, ptr addrspace(1) %309, i1 %318) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cache.py", directory: "/home/master/triton/baichuan/test")
!3 = !{ptr @matmul_cache_kernel_0d1d2d, !"kernel", i32 1}
!4 = !{ptr @matmul_cache_kernel_0d1d2d, !"maxntidx", i32 64}
!5 = distinct !DISubprogram(name: "matmul_cache_kernel_0d1d2d", linkageName: "matmul_cache_kernel_0d1d2d", scope: !2, file: !2, line: 8, type: !6, scopeLine: 8, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 33, column: 51, scope: !5)
!9 = !DILocation(line: 23, column: 24, scope: !5)
!10 = !DILocation(line: 27, column: 22, scope: !5)
!11 = !DILocation(line: 28, column: 29, scope: !5)
!12 = !DILocation(line: 29, column: 35, scope: !5)
!13 = !DILocation(line: 1385, column: 27, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !5, file: !15, discriminator: 0)
!15 = !DIFile(filename: "core.py", directory: "/home/master/anaconda3/lib/python3.11/site-packages/triton/language")
!16 = !DILocation(line: 29, column: 48, scope: !14)
!17 = !DILocation(line: 30, column: 33, scope: !5)
!18 = !DILocation(line: 30, column: 27, scope: !5)
!19 = !DILocation(line: 31, column: 40, scope: !5)
!20 = !DILocation(line: 33, column: 23, scope: !5)
!21 = !DILocation(line: 33, column: 38, scope: !5)
!22 = !DILocation(line: 33, column: 68, scope: !5)
!23 = !DILocation(line: 34, column: 23, scope: !5)
!24 = !DILocation(line: 34, column: 38, scope: !5)
!25 = !DILocation(line: 34, column: 68, scope: !5)
!26 = !DILocation(line: 36, column: 41, scope: !5)
!27 = !DILocation(line: 36, column: 53, scope: !5)
!28 = !DILocation(line: 36, column: 22, scope: !5)
!29 = !DILocation(line: 37, column: 40, scope: !5)
!30 = !DILocation(line: 37, column: 52, scope: !5)
!31 = !DILocation(line: 37, column: 22, scope: !5)
!32 = !DILocation(line: 41, column: 20, scope: !5)
!33 = !DILocation(line: 42, column: 20, scope: !5)
!34 = !DILocation(line: 44, column: 18, scope: !5)
!35 = !DILocation(line: 45, column: 18, scope: !5)
!36 = !DILocation(line: 40, column: 22, scope: !5)
!37 = !DILocation(line: 43, scope: !5)
!38 = !DILocation(line: 41, column: 59, scope: !5)
!39 = !DILocation(line: 41, column: 55, scope: !5)
!40 = !DILocation(line: 41, column: 51, scope: !5)
!41 = !DILocation(line: 42, column: 51, scope: !5)
!42 = !DILocation(line: 52, column: 33, scope: !5)
!43 = !DILocation(line: 52, column: 21, scope: !5)
!44 = !DILocation(line: 52, column: 52, scope: !5)
!45 = !DILocation(line: 53, column: 33, scope: !5)
!46 = !DILocation(line: 53, column: 58, scope: !5)
!47 = !DILocation(line: 53, column: 39, scope: !5)
!48 = !DILocation(line: 54, column: 21, scope: !5)
!49 = !DILocation(line: 54, column: 4, scope: !5)
